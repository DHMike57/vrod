Entering Modules

 (require racket/enter) package: base ~ ~

The bindings documented in this section are provided by the racket/enter
and racket/init libraries, which means that they are available when  the
Racket executable is started with no command-line arguments. They are
not provided by racket/base or racket.

                                        *enter!*
(enter! module-path) ~
(enter! #f)
(enter! module-path flag ...+)
 
flag = #:quiet ~ ~
     | #:verbose-reload ~ ~
     | #:verbose ~ ~
     | #:dont-re-require-enter ~ ~

Intended for use in a REPL, such as when racket is started in
interactive mode. When a module-path is provided (in the same sense as
for require), the corresponding module is loaded or invoked via
dynamic-rerequire, and the current namespace is changed to the body of
the module via module->namespace. When #f is provided, then the current
namespace is restored to the original one.

Additional flags can customize aspects of enter!:

* The #:verbose, #:verbose-reload, and #:quiet flags correspond to 'all,
  'reload, and 'none verbosity for dynamic-rerequire. The default
  corresponds to #:verbose-reload.

* After switching namespaces to the designated module, enter!
  automatically requires racket/enter into the namespace, so that enter!
  can be used to switch namespaces again.  In some cases, requiring
  racket/enter might not be desirable (e.g., in a tool that uses
  racket/enter); use the #:dont-re-require-enter flag to disable the
  require.

                                        *dynamic-enter!*
(dynamic-enter!  mod                                          ~
                [#:verbosity verbosity                        ~ ~
                 #:re-require-enter? re-require-enter?]) -> void? ~ ~
  mod : (or/c module-path? #f) ~ ~
  verbosity : (or/c 'all 'reload 'none) = 'reload ~ ~
  re-require-enter? : any/c = #t ~ ~

Procedure variant of enter!, where verbosity is passed along to
dynamic-rerequire and re-require-enter?  determines whether
dynamic-enter! requires racket/enter in a newly entered namespace.

Added in version 6.0.0.1 of package base.
