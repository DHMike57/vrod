Memory Management

    1 Weak Boxes

    2 Ephemerons

    3 Wills and Executors

    4 Garbage Collection

    5 Phantom Byte Strings

1. Weak Boxes

A weak box is similar to a normal box (see [missing]), but when the
garbage collector (see [missing]) can prove that the content value of a
weak box is only reachable via weak references, the content of the weak
box is replaced with #f. A weak reference is a reference through a weak
box, through a key reference in a weak hash table (see [missing]),
through a value in an ephemeron where the value can be replaced by #f
(see Ephemerons), or through a custodian (see [missing]).

                                        *make-weak-box*
(make-weak-box v) -> weak-box? ~
  v : any/c ~

Returns a new weak box that initially contains v.

                                        *weak-box-value*
(weak-box-value weak-box [gced-v]) -> any/c ~
  weak-box : weak-box? ~
  gced-v : any/c = #f ~

Returns the value contained in weak-box. If the garbage collector has
proven that the previous content value of weak-box was reachable only
through a weak reference, then gced-v (which defaults to #f) is
returned.

                                        *weak-box?*
(weak-box? v) -> boolean? ~
  v : any/c ~

Returns #t if v is a weak box, #f otherwise.

2. Ephemerons

An ephemeron [Hayes97] is a generalization of a weak box (see Weak
Boxes). Instead of just containing one value, an ephemeron holds two
values: one that is considered the value of the ephemeron and another
that is the ephemeron’s key. Like the value in a weak box, the value in
an ephemeron may be replaced by #f, but when the key is no longer
reachable (except possibly via weak references) instead of when the
value is no longer reachable.

As long as an ephemeron’s value is retained, the reference is considered
a non-weak reference. References to the key via the value are treated
specially, however, in that the reference does not necessarily count
toward the key’s reachability. A weak box can be seen as a
specialization of an ephemeron where the key and value are the same.

One particularly common use of ephemerons is to combine them with a weak
hash table (see [missing]) to produce a mapping where the memory manager
can reclaim key–value pairs even when the value refers to the key. A
related use is to retain a reference to a value as long as any value for
which it is an impersonator is reachable; see impersonator-ephemeron.

More precisely,

* the value in an ephemeron is replaced by #f when the automatic memory
  manager can prove that either the ephemeron or the key is reachable
  only through weak references (see Weak Boxes); and

* nothing reachable from the value in an ephemeron counts toward the
  reachability of an ephemeron key (whether for the same ephemeron or
  another), unless the same value is reachable through a non-weak
  reference, or unless the value’s ephemeron key is reachable through a
  non-weak reference (see Weak Boxes for information on weak
  references).

                                        *make-ephemeron*
(make-ephemeron key v) -> ephemeron? ~
  key : any/c ~
  v : any/c ~

Returns a new ephemeron whose key is key and whose value is initially v.

                                        *ephemeron-value*
(ephemeron-value ephemeron [gced-v]) -> any/c ~
  ephemeron : ephemeron? ~
  gced-v : any/c = #f ~

Returns the value contained in ephemeron. If the garbage collector has
proven that the key for ephemeron is only weakly reachable, then the
result is gced-v (which defaults to #f).

                                        *ephemeron?*
(ephemeron? v) -> boolean? ~
  v : any/c ~

Returns #t if v is an ephemeron, #f otherwise.

3. Wills and Executors

A will executor manages a collection of values and associated will
procedures (a.k.a. finalizers). The will procedure for each value is
ready to be executed when the value has been proven (by the garbage
collector) to be unreachable, except through weak references (see Weak
Boxes) or as the registrant for other will executors. A will is useful
for triggering clean-up actions on data associated with an unreachable
value, such as closing a port embedded in an object when the object is
no longer used.

Calling the will-execute or will-try-execute procedure executes a will
that is ready in the specified will executor. A will executor is also a
synchronizable event, so sync or sync/timeout can be used to detect when
a will executor has ready wills. Wills are not executed automatically,
because certain programs need control to avoid race conditions. However,
a program can create a thread whose sole job is to execute wills for a
particular executor.

If a value is registered with multiple wills (in one or multiple
executors), the wills are readied in the reverse order of registration.
Since readying a will procedure makes the value reachable again, the
will must be executed and the value must be proven again unreachable
through only weak references before another of the wills is readied or
executed.  However, wills for distinct unreachable values are readied at
the same time, regardless of whether the values are reachable from each
other.

A will executor’s register is held non-weakly until after the
corresponding will procedure is executed. Thus, if the content value of
a weak box (see Weak Boxes) is registered with a will executor, the weak
box’s content is not changed to #f until all wills have been executed
for the value and the value has been proven again reachable through only
weak references.

A will executor can be used as a synchronizable event (see [missing]). A
will executor is ready for synchronization when will-execute would not
block; the synchronization result of a will executor is the will
executor itself.

These examples show how to run cleanup actions when no synchronization
is necessary. It simply runs the registered executors as they become
ready in another thread.

Examples:
  > (define an-executor (make-will-executor))

  > (void
     (thread
      (λ ()
        (let loop ()
          (will-execute an-executor)
          (loop)))))

  > (define (executor-proc v) (printf "a-box is now garbage\n"))

  > (define a-box-to-track (box #f))

  > (will-register an-executor a-box-to-track executor-proc)

  > (collect-garbage)

  > (set! a-box-to-track #f)

  > (collect-garbage)
  a-box is now garbage


                                        *make-will-executor*
(make-will-executor) -> will-executor? ~

Returns a new will executor with no managed values.

                                        *will-executor?*
(will-executor? v) -> boolean? ~
  v : any/c ~

Returns #t if v is a will executor, #f otherwise.

                                        *will-register*
(will-register executor v proc) -> void? ~
  executor : will-executor? ~
  v : any/c ~
  proc : (any/c . -> . any) ~

Registers the value v with the will procedure proc in the will executor
executor. When v is proven unreachable, then the procedure proc is ready
to be called with v as its argument via will-execute or
will-try-execute.  The proc argument is strongly referenced until the
will procedure is executed.

                                        *will-execute*
(will-execute executor) -> any ~
  executor : will-executor? ~

Invokes the will procedure for a single “unreachable” value registered
with the executor executor. The values returned by the will procedure
are the result of the will-execute call.  If no will is ready for
immediate execution, will-execute blocks until one is ready.

                                        *will-try-execute*
(will-try-execute executor) -> any ~
  executor : any/c ~

Like will-execute if a will is ready for immediate execution. Otherwise,
#f is returned.

4. Garbage Collection

Set the PLTDISABLEGC environment variable (to any value) before Racket
starts to disable garbage collection.

In Racket 3m (the main variant of Racket), each garbage collection logs
a message (see [missing]) at the 'debug level with topic 'GC. The data
portion of the message is an instance of a gc-info prefab structure type
with 10 fields as follows, but future versions of Racket may use a
gc-info prefab structure with additional fields:

  (struct gc-info (major? pre-amount pre-admin-amount code-amount
                          post-amount post-admin-amount
                          start-process-time end-process-time
                          start-time end-time)
    #:prefab) ~

* The major? field indicates whether the collection was a “major”
  collection that inspects all memory or a “minor” collection that
  mostly inspects just recent allocations.

* The pre-amount field reports place-local memory use (i.e., not
  counting the memory use of child places) in bytes at the time that the
  garbage collection started.

* The pre-admin-amount is a larger number that includes memory use for
  the garbage collector’s overhead, such as space on memory pages that
  are mapped but not currently used.

* The code-amount field reports additional memory use for generated
  native code (which is the same just before and after a garbage
  collection, since it is released via finalization).

* The post-amount and post-admin-amount fields correspond to pre-amount
  and pre-admin-amount, but after garbage collection. In typical
  configurations, the difference between post-amount and pre-amount
  contributes to post-admin-amount, since reclaimed pages tend to stay
  in reserve with the expectation that they’ll be needed again (but the
  pages are released if multiple collections pass without need for the
  pages).

* The start-process-time and end-process-time fields report processor
  time (in the sense of current-process-milliseconds) at the start and
  end of garbage collection. The difference between the times is the
  processor time consumed by collection.

* The start-time and end-time fields report real time (in the sense of
  current-inexact-milliseconds) at the start and end of garbage
  collection. The difference between the times is the real time consumed
  by garbage collection.

The format of the logged message’s text is subject to change. Currently,
after a prefix that indicates the place and collection mode, the text
has the format

  >used<(>admin<)[>code<]; free >reclaimed<(>adjust<) >elapsed< @
  >timestamp<
>used<      Collectable memory in use just prior to garbage collection
  >admin<     Additional memory used as to manage collectable memory
  >code<      Additional memory used for generated machine code
  >reclaimed< Collectable memory reclaimed by garbage collection
  >adjust<    Negation of change to administrative memory minus >reclaimed<
  >elapsed<   Processor time used to perform garbage collection
  >timestamp< Processor time since startup of garbage collection’s start

                                        *collect-garbage*
(collect-garbage) -> void? ~

Forces an immediate garbage collection (unless garbage collection is
disabled by setting PLTDISABLEGC). Some effectively unreachable data may
remain uncollected, because the collector cannot prove that it is
unreachable.

The collect-garbage procedure provides some control over the timing of
collections, but garbage will obviously be collected even if this
procedure is never called (unless garbage collection is disabled).

                                        *current-memory-use*
(current-memory-use [cust]) -> exact-nonnegative-integer? ~
  cust : custodian? = #f ~

Returns an estimate of the number of bytes of memory occupied by
reachable data from cust.  This estimate is calculated by the last
garbage collection, and can be 0 if none occurred (or if none occurred
since the given custodian was created).  The current-memory-use function
does not perform a collection by itself; doing one before the call will
generally decrease the result (or increase it from 0 if no collections
happened yet).

If cust is not provided, the estimate is a total reachable from any
custodians.

When Racket is compiled without support for memory accounting, the
estimate is the same (i.e., all memory) for any individual custodian;
see also custodian-memory-accounting-available?.

See also vector-set-performance-stats!.

                                        *dump-memory-stats*
(dump-memory-stats v ...) -> any ~
  v : any/c ~

Dumps information about memory usage to the low-level error port  or
console.

Various combinations of v arguments can control the information in a
dump. The information that is available depends on your Racket build;
check the end of a dump from a particular build to see if it offers
additional information; otherwise, all vs are ignored.

5. Phantom Byte Strings

A phantom byte string is a small Racket value that is treated by the
Racket memory manager as having an arbitrary size, which is specified
when the phantom byte string is created or when it is changed via
set-phantom-bytes!.

A phantom byte string acts as a hint to Racket’s memory manager that
memory is allocated within the process but through a separate allocator,
such as through a foreign library that is accessed via ffi/unsafe. This
hint is used to trigger garbage collections or to compute the result of
current-memory-use. Currently, the hint is used only in Racket 3m (the
main variant of Racket).

                                        *phantom-bytes?*
(phantom-bytes? v) -> boolean? ~
  v : any/c ~

Returns #t if v is a phantom byte string, #f otherwise.

                                        *make-phantom-bytes*
(make-phantom-bytes k) -> phantom-bytes? ~
  k : exact-nonnegative-integer? ~

Creates a phantom byte string that is treated by the Racket memory
manager as being k bytes in size. For a large enough k, the
exn:fail:out-of-memory exception is raised—either because the size is
implausibly large, or because a memory limit has been installed with
custodian-limit-memory.

                                        *set-phantom-bytes!*
(set-phantom-bytes! phantom-bstr k) -> phantom-bytes? ~
  phantom-bstr : phantom-bytes? ~
  k : exact-nonnegative-integer? ~

Adjusts the size of a phantom byte string as it is treated by the Racket
memory manager.

For example, if the memory that phantom-bstr represents is released
through a foreign library, then (set-phantom-bytes! phantom-bstr 0) can
reflect the change in memory use.

When k is larger than the current size of phantom-bstr, then this
function can raise exn:fail:out-of-memory, like make-phantom-bytes.
