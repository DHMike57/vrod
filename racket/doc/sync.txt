Synchronization

Racket’s synchronization toolbox spans four layers:

* synchronizable events — a general framework for synchronization;

* channels — a primitive that can be used, in principle, to build most
  other kinds of synchronizable events (except the ones that compose
  events); and

* semaphores — a simple and especially cheap primitive for
  synchronization.

* future semaphores — a simple synchronization primitive for use with
  futures.

    1 Events

    2 Channels

    3 Semaphores

    4 Buffered Asynchronous Channels
      4.1 Creating and Using Asynchronous Channels
      4.2 Contracts and Impersonators on Asynchronous Channels

1. Events

A synchronizable event (or just event for short) works with the sync
procedure to coordinate synchronization among threads. Certain kinds of
objects double as events, including ports and threads. Other kinds of
objects exist only for their use as events.

At any point in time, an event is either ready for synchronization, or
it is not; depending on the kind of event and how it is used by other
threads, an event can switch from not ready to ready (or back), at any
time.  If a thread synchronizes on an event when it is ready, then the
event produces a particular synchronization result.

Synchronizing an event may affect the state of the event. For example,
when synchronizing a semaphore, then the semaphore’s internal count is
decremented, just as with semaphore-wait. For most kinds of events,
however (such as a port), synchronizing does not modify the event’s
state.

Racket values that act as synchronizable events include semaphores,
channels, asynchronous channels, ports, TCP listeners, log receivers,
threads, subprocesses, will executors, and custodian boxes. Libraries
can define new synchronizable events, especially though prop:evt.

                                        *evt?*
(evt? v) -> boolean? ~
  v : any/c ~

Returns #t if v is a synchronizable event, #f otherwise.

Examples:
  > (evt? never-evt)
  #t
  > (evt? (make-channel))
  #t
  > (evt? 5)
  #f

                                        *sync*
(sync evt ...) -> any ~
  evt : evt? ~

Blocks as long as none of the synchronizable events evts are ready, as
defined above.

When at least one evt is ready, its synchronization result (often evt
itself) is returned.  If multiple evts are ready, one of the evts is
chosen pseudo-randomly for the result; the
current-evt-pseudo-random-generator parameter sets the random-number
generator that controls this choice.

Examples:
  > (define ch (make-channel))

  > (thread (λ () (displayln (sync ch))))
  #<thread>
  > (channel-put ch 'hellooooo)
  hellooooo


Changed in version 6.1.0.3: Allow 0 arguments instead of 1 or more.

                                        *sync/timeout*
(sync/timeout timeout evt ...) -> any ~
  timeout : (or/c #f (and/c real? (not/c negative?)) (-> any)) ~
  evt : evt? ~

Like sync if timeout is #f. If timeout is a real number, then the result
is #f if timeout seconds pass without a successful synchronization. If
timeout is a procedure, then it is called in tail position if polling
the evts discovers no ready events.

A zero value for timeout is equivalent to (lambda () #f). In either
case, each evt is checked at least once before returning #f or calling
timeout.

See also alarm-evt for an alternative timeout mechanism.

Examples:
  ; times out before waking up
  > (sync/timeout
     0.5
     (thread (λ () (sleep 1) (displayln "woke up!"))))
  #f
  > (sync/timeout
     (λ () (displayln "no ready events"))
     never-evt)
  no ready events


Changed in version 6.1.0.3: Allow 1 argument instead of 2 or more.

                                        *sync/enable-break*
(sync/enable-break evt ...) -> any ~
  evt : evt? ~

Like sync, but breaking is enabled (see [missing]) while waiting on the
evts. If breaking is disabled when sync/enable-break is called, then
either all evts remain unchosen or the exn:break exception is raised,
but not both.

                                        *sync/timeout/enable-break*
(sync/timeout/enable-break timeout evt ...) -> any ~
  timeout : (or/c #f (and/c real? (not/c negative?)) (-> any)) ~
  evt : evt? ~

Like sync/enable-break, but with a timeout as for sync/timeout.

                                        *choice-evt*
(choice-evt evt ...) -> evt? ~
  evt : evt? ~

Creates and returns a single event that combines the evts. Supplying the
result to sync is the same as supplying each evt to the same call.

That is, an event returned by choice-evt is ready for synchronization
when one or more of the evts supplied to choice-evt are ready for
synchronization. If the choice event is chosen, one of its ready evts is
chosen pseudo-randomly, and the synchronization result is the chosen
evt’s synchronization result.

Examples:
  > (define ch1 (make-channel))

  > (define ch2 (make-channel))

  > (define either-channel (choice-evt ch1 ch2))

  > (thread (λ () (displayln (sync either-channel))))
  #<thread>
  > (channel-put
     (if (> (random) 0.5) ch1 ch2)
     'tuturuu)
  tuturuu


                                        *wrap-evt*
(wrap-evt evt wrap) -> evt? ~
  evt : evt? ~
  wrap : (any/c ... . -> . any) ~

Creates an event that is ready for synchronization when evt is ready for
synchronization, but whose synchronization result is determined by
applying wrap to the synchronization result of evt. The number of
arguments accepted by wrap must match the number of values for the
synchronization result of evt.

The call to wrap is parameterize-breaked to disable breaks initially.

Examples:
  > (define ch (make-channel))

  > (define evt (wrap-evt ch (λ (v) (format "you've got mail: ~a" v)))) ~

  > (thread (λ () (displayln (sync evt))))
  #<thread>
  > (channel-put ch "Dear Alice ...")
  you've got mail: Dear Alice ...


                                        *handle-evt*
(handle-evt evt handle) -> handle-evt? ~
  evt : evt? ~
  handle : (any/c ... . -> . any) ~

Like wrap-evt, except that handle is called in tail position with
respect to the synchronization request—and without breaks explicitly
disabled—when it is not wrapped by wrap-evt, chaperone-evt, or another
handle-evt.

Examples:
  > (define msg-ch (make-channel))

  > (define exit-ch (make-channel))

  > (thread
     (λ ()
       (let loop ([val 0])
         (printf "val = ~a~n" val)
         (sync (handle-evt
                msg-ch
                (λ (val) (loop val)))
               (handle-evt
                exit-ch
                (λ (val) (displayln val)))))))
  #<thread>
  > (channel-put msg-ch 5)
  val = 0
  val = 5

  > (channel-put msg-ch 7)

  > (channel-put exit-ch 'done)
  val = 7
  done


                                        *guard-evt*
(guard-evt maker) -> evt? ~
  maker : (-> (or/c evt? any/c)) ~

Creates a value that behaves as an event, but that is actually an event
maker.

An event guard returned by guard-evt generates an event when guard is
used with sync (or whenever it is part of a choice event used with sync,
etc.), where the generated event is the result of calling maker. The
maker procedure may be called by sync at most once for a given call to
sync, but maker may not be called if a ready event is chosen before
guard is even considered.

If maker returns a non-event, then maker’s result is replaced with an
event that is ready for synchronization and whose synchronization result
is guard.

                                        *nack-guard-evt*
(nack-guard-evt maker) -> evt? ~
  maker : (evt? . -> . (or/c evt? any/c)) ~

Like guard-evt, but when maker is called, it is given a NACK (“negative
acknowledgment”) event. After starting the call to maker, if the event
from maker is not ultimately chosen as the ready event, then the NACK
event supplied to maker becomes ready for synchronization with a #<void>
value.

The NACK event becomes ready for synchronization when the event is
abandoned when either some other event is chosen, the synchronizing
thread is dead, or control escapes from the call to sync (even if
nack-guard’s maker has not yet returned a value). If the event returned
by maker is chosen, then the NACK event never becomes ready for
synchronization.

                                        *poll-guard-evt*
(poll-guard-evt maker) -> evt? ~
  maker : (boolean? . -> . (or/c evt? any/c)) ~

Like guard-evt, but when maker is called, it is provided a boolean value
that indicates whether the event will be used for a poll, #t, or for a
blocking synchronization, #f.

If #t is supplied to maker, if breaks are disabled, if the polling
thread is not terminated, and if polling the resulting event produces a
synchronization result, then the event will certainly be chosen for its
result.

                                        *replace-evt*
(replace-evt evt maker) -> evt? ~
  evt : evt? ~
  maker : (any/c ... . -> . (or/c evt? any/c)) ~

Like guard-evt, but maker is called only after evt becomes ready for
synchronization, and the synchronization result of evt is passed to
maker.

The attempt to synchronize on evt proceeds concurrently as the attempt
to synchronize on the result guard from replace-evt; despite that
concurrency, if maker is called, it is called in the thread that is
synchronizing on guard. Synchronization can succeed for both evt and
another synchronized with guard at the same time; the single-choice
guarantee of synchronization applies only to the result of maker and
other events synchronized with guard.

If maker returns a non-event, then maker’s result is replaced with an
event that is ready for synchronization and whose synchronization result
is guard.

Added in version 6.1.0.3.

always-evt : evt? ~

A constant event that is always ready for synchronization, with itself
as its synchronization result.

Example:
  > (sync always-evt)
  #<always-evt>

never-evt : evt? ~

A constant event that is never ready for synchronization.

Example:
  > (sync/timeout 0.1 never-evt)
  #f

                                        *system-idle-evt*
(system-idle-evt) -> evt? ~

Returns an event that is ready for synchronization when the system is
otherwise idle: if the result event were replaced by never-evt, no
thread in the system would be available to run. In other words, all
threads must be suspended or blocked on events with timeouts that have
not yet expired. The system-idle event’s synchronization result is
#<void>. The result of the system-idle-evt procedure is always the same
event.

Examples:
  > (define th (thread (λ () (let loop () (loop)))))

  > (sync/timeout 0.1 (system-idle-evt))
  #f
  > (kill-thread th)

  > (sync (system-idle-evt))


                                        *alarm-evt*
(alarm-evt msecs) -> evt? ~
  msecs : real? ~

Returns a synchronizable event that is not ready for synchronization
when (current-inexact-milliseconds) would return a value that is less
than msecs, and it is ready for synchronization when
(current-inexact-milliseconds) would return a value that is more than
msecs. The synchronization result of a alarm event is the alarm event
itself.

Examples:
  > (define alarm (alarm-evt (+ (current-inexact-milliseconds) 100)))

  > (sync alarm)
  #<alarm-evt>

                                        *handle-evt?*
(handle-evt? evt) -> boolean? ~
  evt : evt? ~

Returns #t if evt was created by handle-evt or by choice-evt applied to
another event for which handle-evt? produces #t. For any other event,
handle-evt?  produces #f.

Examples:
  > (handle-evt? never-evt)
  #f
  > (handle-evt? (handle-evt always-evt values))
  #t

prop:evt : struct-type-property? ~

A structure type property that identifies structure types whose
instances can serve as synchronizable events. The property value can  be
any of the following:

* An event evt: In this case, using the structure as an event is
  equivalent to using evt.

* A procedure proc of one argument: In this case, the structure is
  similar to an event generated by guard-evt, except that the would-be
  guard procedure proc receives the structure as an argument, instead of
  no arguments; also, a non-event result from proc is replaced with an
  event that is already ready for synchronization and whose
  synchronization result is the structure.

* An exact, non-negative integer between 0 (inclusive) and the number of
  non-automatic fields in the structure type (exclusive, not counting
  supertype fields): The integer identifies a field in the structure,
  and the field must be designated as immutable. If the field contains
  an object or an event-generating procedure of one argument, the event
  or procedure is used as above. Otherwise, the structure acts as an
  event that is never ready.

Instances of a structure type with the prop:input-port or
prop:output-port property are also synchronizable events by virtue of
being a port. If the structure type has more than one of prop:evt,
prop:input-port, and prop:output-port, then the prop:evt value (if any)
takes precedence for determining the instance’s behavior as an event,
and the prop:input-port property takes precedence over prop:output-port
for synchronization.

Examples:
  > (define-struct wt (base val)
                   #:property prop:evt (struct-field-index base)) ~

  > (define sema (make-semaphore))

  > (sync/timeout 0 (make-wt sema #f))
  #f
  > (semaphore-post sema)

  > (sync/timeout 0 (make-wt sema #f))
  #<semaphore>
  > (semaphore-post sema)

  > (sync/timeout 0 (make-wt (lambda (self) (wt-val self)) sema))
  #<semaphore>
  > (semaphore-post sema)

  > (define my-wt (make-wt (lambda (self) (wrap-evt
                                           (wt-val self)
                                           (lambda (x) self)))
                           sema))

  > (sync/timeout 0 my-wt)
  #<wt>
  > (sync/timeout 0 my-wt)
  #f

                                        *current-evt-pseudo-random-generator*
(current-evt-pseudo-random-generator) ~
 -> pseudo-random-generator?
(current-evt-pseudo-random-generator generator) -> void?
  generator : pseudo-random-generator? ~

A parameter that determines the pseudo-random number generator used by
sync for events created by choice-evt.

2. Channels

A channel both synchronizes a pair of threads and passes a value from
one to the other. Channels are synchronous; both the sender and the
receiver must block until the (atomic) transaction is complete. Multiple
senders and receivers can access a channel at once, but a single sender
and receiver is selected for each transaction.

Channel synchronization is fair: if a thread is blocked on a channel and
transaction opportunities for the channel occur infinitely often, then
the thread eventually participates in a transaction.

In addition to its use with channel-specific procedures, a channel can
be used as a synchronizable event (see Events).  A channel is ready for
synchronization when channel-get would not block; the channel’s
synchronization result is the same as the channel-get result.

For buffered asynchronous channels, see Buffered Asynchronous Channels.

                                        *channel?*
(channel? v) -> boolean? ~
  v : any/c ~

Returns #t if v is a channel, #f otherwise.

                                        *make-channel*
(make-channel) -> channel? ~

Creates and returns a new channel. The channel can be used with
channel-get, with channel-try-get, or as a synchronizable event (see
Events) to receive a value through the channel. The channel can be used
with channel-put or through the result of channel-put-evt to send a
value through the channel.

                                        *channel-get*
(channel-get ch) -> any ~
  ch : channel? ~

Blocks until a sender is ready to provide a value through ch. The result
is the sent value.

                                        *channel-try-get*
(channel-try-get ch) -> any ~
  ch : channel? ~

Receives and returns a value from ch if a sender is immediately ready,
otherwise returns #f.

                                        *channel-put*
(channel-put ch v) -> void? ~
  ch : channel? ~
  v : any/c ~

Blocks until a receiver is ready to accept the value v through ch.

                                        *channel-put-evt*
(channel-put-evt ch v) -> channel-put-evt? ~
  ch : channel? ~
  v : any/c ~

Returns a fresh synchronizable event for use with sync. The event is
ready for synchronization when (channel-put ch v) would not block, and
the event’s synchronization result is the event itself.

                                        *channel-put-evt?*
(channel-put-evt? v) -> boolean? ~
  v : any/c ~

Returns #t if v is a channel-put event produced by channel-put-evt, #f
otherwise.

3. Semaphores

A semaphore has an internal counter; when this counter is zero, the
semaphore can block a thread’s execution (through semaphore-wait) until
another thread increments the counter (using semaphore-post). The
maximum value for a semaphore’s internal counter is platform-specific,
but always at least 10000.

A semaphore’s counter is updated in a single-threaded manner, so that
semaphores can be used for reliable synchronization. Semaphore waiting
is fair: if a thread is blocked on a semaphore and the semaphore’s
internal value is non-zero infinitely often, then the thread is
eventually unblocked.

In addition to its use with semaphore-specific procedures, a semaphore
can be used as a synchronizable event (see Events). A semaphore is ready
for synchronization when semaphore-wait would not block; the
synchronization result of a semaphore is the semaphore itself.

                                        *semaphore?*
(semaphore? v) -> boolean? ~
  v : any/c ~

Returns #t if v is a semaphore, #f otherwise.

                                        *make-semaphore*
(make-semaphore [init]) -> semaphore? ~
  init : exact-nonnegative-integer? = 0 ~

Creates and returns a new semaphore with the counter initially set to
init. If init is larger than a semaphore’s maximum internal counter
value, the exn:fail exception is raised.

                                        *semaphore-post*
(semaphore-post sema) -> void? ~
  sema : semaphore? ~

Increments the semaphore’s internal counter and returns #<void>. If the
semaphore’s internal counter has already reached its maximum value, the
exn:fail exception is raised.

                                        *semaphore-wait*
(semaphore-wait sema) -> void? ~
  sema : semaphore? ~

Blocks until the internal counter for semaphore sema is non-zero. When
the counter is non-zero, it is decremented and semaphore-wait returns
#<void>.

                                        *semaphore-try-wait?*
(semaphore-try-wait? sema) -> boolean? ~
  sema : semaphore? ~

Like semaphore-wait, but semaphore-try-wait? never blocks execution.  If
sema’s internal counter is zero, semaphore-try-wait? returns #f
immediately without decrementing the counter. If sema’s counter is
positive, it is decremented and #t is returned.

                                        *semaphore-wait/enable-break*
(semaphore-wait/enable-break sema) -> void? ~
  sema : semaphore? ~

Like semaphore-wait, but breaking is enabled (see [missing]) while
waiting on sema. If breaking is disabled when
semaphore-wait/enable-break is called, then either the semaphore’s
counter is decremented or the exn:break exception is raised, but not
both.

                                        *semaphore-peek-evt*
(semaphore-peek-evt sema) -> semaphore-peek-evt? ~
  sema : semaphore? ~

Creates and returns a new synchronizable event (for use with sync, for
example) that is ready for synchronization when sema is ready, but
synchronizing the event does not decrement sema’s internal count. The
synchronization result of a semaphore-peek event is the semaphore-peek
event itself.

                                        *semaphore-peek-evt?*
(semaphore-peek-evt? v) -> boolean? ~
  v : any/c ~

Returns #t if v is a semaphore wrapper produced by semaphore-peek-evt,
#f otherwise.

                                        *call-with-semaphore*
(call-with-semaphore  sema                 ~
                      proc                
                     [try-fail-thunk]     
                      arg ...)        -> any
  sema : semaphore? ~
  proc : procedure? ~
  try-fail-thunk : (or/c (-> any) #f) = #f ~
  arg : any/c ~

Waits on sema using semaphore-wait, calls proc with all args, and then
posts to sema. A continuation barrier blocks full continuation jumps
into or out of proc (see [missing]), but escape jumps are allowed, and
sema is posted on escape. If try-fail-thunk is provided and is not #f,
then semaphore-try-wait? is called on sema instead of semaphore-wait,
and try-fail-thunk is called if the wait fails.

                                        *call-with-semaphore/enable-break*
(call-with-semaphore/enable-break  sema                 ~
                                   proc                
                                  [try-fail-thunk]     
                                   arg ...)        -> any
  sema : semaphore? ~
  proc : procedure? ~
  try-fail-thunk : (or/c (-> any) #f) = #f ~
  arg : any/c ~

Like call-with-semaphore, except that semaphore-wait/enable-break is
used with sema in non-try mode. When try-fail-thunk is provided and not
#f, then breaks are enabled around the use of semaphore-try-wait? on
sema.

4. Buffered Asynchronous Channels

 (require racket/async-channel) package: base ~

The bindings documented in this section are provided by the
racket/async-channel library, not racket/base or racket.

4.1. Creating and Using Asynchronous Channels

+See also [missing].

An asynchronous channel is like a channel, but it buffers values so that
a send operation does not wait on a receive operation.

In addition to its use with procedures that are specific to asynchronous
channels, an asynchronous channel can be used as a synchronizable event
(see Events).  An asynchronous channel is ready for synchronization when
async-channel-get would not block; the asynchronous channel’s
synchronization result is the same as the async-channel-get result.

                                        *async-channel?*
(async-channel? v) -> boolean? ~
  v : any/c ~

Returns #t if v is an asynchronous channel, #f otherwise.

                                        *make-async-channel*
(make-async-channel [limit]) -> async-channel? ~
  limit : (or/c exact-positive-integer? #f) = #f ~

Returns an asynchronous channel with a buffer limit of limit items. A
get operation blocks when the channel is empty, and a put operation
blocks when the channel has limit items already. If limit is #f, the
channel buffer has no limit (so a put never blocks).

                                        *async-channel-get*
(async-channel-get ach) -> any/c ~
  ach : async-channel? ~

Blocks until at least one value is available in ach, and then returns
the first of the values that were put into async-channel.

                                        *async-channel-try-get*
(async-channel-try-get ach) -> any/c ~
  ach : async-channel? ~

If at least one value is immediately available in ach, returns the first
of the values that were put into ach. If async-channel is empty, the
result is #f.

                                        *async-channel-put*
(async-channel-put ach v) -> void? ~
  ach : async-channel? ~
  v : any/c ~

Puts v into ach, blocking if ach’s buffer is full until space is
available.

                                        *async-channel-put-evt*
(async-channel-put-evt ach v) -> evt? ~
  ach : async-channel? ~
  v : any/c ~

Returns a synchronizable event that is ready for synchronization when
(async-channel-put ach v) would return a value (i.e., when the channel
holds fewer values already than its limit); the synchronization result
of a asychronous channel-put event is the asychronous channel-put event
itself.

Examples:
  (define (server input-channel output-channel)
    (thread (lambda ()
              (define (get)
                (async-channel-get input-channel))
              (define (put x)
                (async-channel-put output-channel x))
              (define (do-large-computation)
                (sqrt 9))
              (let loop ([data (get)])
                (case data
                  [(quit) (void)]
                  [(add) (begin
                           (put (+ 1 (get)))
                           (loop (get)))]
                  [(long) (begin
                            (put (do-large-computation))
                            (loop (get)))])))))


  (define to-server (make-async-channel))


  (define from-server (make-async-channel))


  > (server to-server from-server)
  #<thread>
  > (async-channel? to-server)
  #t
  > (printf "Adding 1 to 4\n")
  Adding 1 to 4

  > (async-channel-put to-server 'add)

  > (async-channel-put to-server 4)

  > (printf "Result is ~a\n" (async-channel-get from-server))
  Result is 5

  > (printf "Ask server to do a long computation\n")
  Ask server to do a long computation

  > (async-channel-put to-server 'long)

  > (printf "I can do other stuff\n")
  I can do other stuff

  > (printf "Ok, computation from server is ~a\n"
            (async-channel-get from-server))
  Ok, computation from server is 3

  > (async-channel-put to-server 'quit)


4.2. Contracts and Impersonators on Asynchronous Channels

                                        *async-channel/c*
(async-channel/c c) -> contract? ~
  c : contract? ~

Returns a contract that recognizes asynchronous channels. Values put
into or retrieved from the channel must match c.

If the c argument is a flat contract or a chaperone contract, then the
result will be a chaperone contract. Otherwise, the result will be an
impersonator contract.

When an async-channel/c contract is applied to an asynchronous channel,
the result is not eq? to the input. The result will be either a
chaperone or impersonator of the input depending on the type of
contract.

                                        *impersonate-async-channel*
(impersonate-async-channel channel       ~
                           get-proc     
                           put-proc     
                           prop         
                           prop-val ... 
                           ...)         
 -> (and/c async-channel? impersonator?)
  channel : async-channel? ~
  get-proc : (any/c . -> . any/c) ~
  put-proc : (any/c . -> . any/c) ~
  prop : impersonator-property? ~
  prop-val : any ~

Returns an impersonator of channel, which redirects the
async-channel-get and async-channel-put operations.

The get-proc must accept the value that async-channel-get produces on
channel; it must produce a replacement value, which is the result of the
get operation on the impersonator.

The put-proc must accept the value passed to async-channel-put called on
channel; it must produce a replacement value, which is the value passed
to the put procedure called on the original channel.

The get-proc and put-proc procedures are called for all operations that
get or put values from the channel, not just async-channel-get and
async-channel-put.

Pairs of prop and prop-val (the number of arguments to
impersonate-async-channel must be odd) add impersonator properties or
override impersonator property values of channel.

                                        *chaperone-async-channel*
(chaperone-async-channel channel       ~
                         get-proc     
                         put-proc     
                         prop         
                         prop-val ... 
                         ...)         
 -> (and/c async-channel? chaperone?)
  channel : async-channel? ~
  get-proc : (any/c . -> . any/c) ~
  put-proc : (any/c . -> . any/c) ~
  prop : impersonator-property? ~
  prop-val : any ~

Like impersonate-async-channel, but the get-proc procedure must produce
the same value or a chaperone of the original value, and put-proc must
produce the same value or a chaperone of the original value.
