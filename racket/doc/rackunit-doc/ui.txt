User Interfaces

RackUnit provides a textual and a graphical user interface

1. Textual User Interface

 (require rackunit/text-ui) package: rackunit-lib ~

The textual UI is in the rackunit/text-ui module. It is run via the
run-tests function.

                                        *run-tests*
(run-tests test [verbosity]) -> natural-number/c ~
  test : (or/c test-case? test-suite?) ~
  verbosity : (symbols 'quiet 'normal 'verbose) = 'normal ~

The given test is run and the result of running it output to the
current-output-port.  The output is compatible with the (X)Emacs
next-error command (as used, for example, by (X)Emacs’s compile
function)

The optional verbosity is one of 'quiet, 'normal, or 'verbose.  Quiet
output displays only the number of successes, failures, and errors.
Normal reporting suppresses some extraneous check information (such as
the expression).  Verbose reports all information.

run-tests returns the number of unsuccessful tests.

2. Graphical User Interface

 (require rackunit/gui) package: rackunit-gui ~

RackUnit also provides a GUI test runner, available from the
rackunit/gui module.

                                        *test/gui*
(test/gui test ... [#:wait? wait?]) -> void? ~ ~
  test : (or/c test-case? test-suite?) ~
  wait? : boolean? = #f ~

Creates a new RackUnit GUI window and runs each test. The GUI is updated
as tests complete.

When wait? is true, test/gui does not return until the test runner
window has been closed.

Given the following program, the RackUnit GUI will look as shown below:

  #lang racket
  (require rackunit rackunit/gui)
  (test/gui
   (test-suite
    "all tests"
    (test-suite
     "math tests"
     (test-case "addition" (check-equal? (+ 1 1) 2))
     (test-case "subtraction" (check-equal? (- 0 0) 0))
     (test-case "multiplication" (check-equal? (* 2 2) 5)))
    (test-suite
     "string tests"
     (test-case "append" (check-equal? (string-append "a" "b") "ab"))
     (test-case "ref" (check-equal? (string-ref "abc" 1) #\b)))))

Screenshot of the RackUnit window. It features a tree representing the
nested test suites (with test cases as leaves) on the left pane, and
information about the selected test failure in the right pane.

                                        *make-gui-runner*
(make-gui-runner) -> (-> (or/c test-case? test-suite?) ... any) ~

Creates a new RackUnit GUI window and returns a procedure that, when
applied, runs the given tests and displays the results in the GUI.
