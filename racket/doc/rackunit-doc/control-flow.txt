Test Control Flow

The before, after, and around macros allow you to specify code that is
always run before, after, or around expressions in a test case.

                                        *before*
(before before-expr expr-1 expr-2 ...) ~

Whenever control enters the scope execute the before-expr before
executing expr-1, and expr-2 ...

                                        *after*
(after expr-1 expr-2 ... after-expr) ~

Whenever control exits the scope execute the after-expr after executing
expr-1, and expr-2 ...  The after-expr is executed even if control exits
via an exception or other means.

                                        *around*
(around before-expr expr-1 expr-2 ... after-expr) ~

Whenever control enters the scope execute the before-expr before
executing expr-1 expr-2 ..., and execute after-expr whenever control
leaves the scope.

Example:

The test below checks that the file test.dat contains the string "foo".
The before action writes to this file.  The after action deletes it.

  (around
    (with-output-to-file "test.dat"
       (lambda ()
         (write "foo")))
    (with-input-from-file "test.dat"
      (lambda ()
        (check-equal? "foo" (read))))
    (delete-file "test.dat"))

                                        *delay-test*
(delay-test test1 test2 ...) ~

This somewhat curious macro evaluates the given tests in a context where
current-test-case-around is parameterized to
test-suite-test-case-around.  This has been useful in testing RackUnit.
It might be useful for you if you create test cases that create test
cases.
