Networking

    1 TCP

    2 UDP

1. TCP

 (require racket/tcp) package: base ~ ~

The bindings documented in this section are provided by the racket/tcp
and racket libraries, but not racket/base.

For information about TCP in general, see TCP/IP Illustrated, Volume 1
by W. Richard Stevens.

                                        *tcp-listen*
(tcp-listen  port-no             ~
            [max-allow-wait     
             reuse?             
             hostname])     -> tcp-listener?
  port-no : listen-port-number? ~ ~
  max-allow-wait : exact-nonnegative-integer? = 4 ~ ~
  reuse? : any/c = #f ~ ~
  hostname : (or/c string? #f) = #f ~ ~

Creates a “listening” server on the local machine at the port number
specified by port-no. If port-no is 0 the socket binds to an ephemeral
port, which can be determined by calling tcp-addresses.  The
max-allow-wait argument determines the maximum number of client
connections that can be waiting for acceptance. (When max-allow-wait
clients are waiting acceptance, no new client connections can be made.)

If the reuse? argument is true, then tcp-listen will create a listener
even if the port is involved in a TIME_WAIT state. Such a use of reuse?
defeats certain guarantees of the TCP protocol; see Stevens’s book for
details. Furthermore, on many modern platforms, a true value for reuse?
overrides TIME_WAIT only if the listener was previously created with a
true value for reuse?.

If hostname is #f (the default), then the listener accepts connections
to all of the listening machine’s addresses. Otherwise, the listener
accepts connections only at the interface(s) associated with the given
hostname. For example, providing "127.0.0.1" as hostname creates a
listener that accepts only connections to "127.0.0.1" (the loopback
interface) from the local machine.

                                        *Racket*
(Racket implements a listener with multiple sockets, if necessary, to ~
accommodate multiple addresses with different protocol families. On
Linux, if hostname maps to both IPv4 and IPv6 addresses, then the
behavior depends on whether IPv6 is supported and IPv6 sockets can be
configured to listen to only IPv6 connections: if IPv6 is not supported
or IPv6 sockets are not configurable, then the IPv6 addresses are
ignored; otherwise, each IPv6 listener accepts only IPv6 connections.)

The return value of tcp-listen is a TCP listener. This value can be used
in future calls to tcp-accept, tcp-accept-ready?, and tcp-close.  Each
new TCP listener value is placed into the management of the current
custodian (see [missing]).

If the server cannot be started by tcp-listen, the exn:fail:network
exception is raised.

A TCP listener can be used as a synchronizable event (see [missing]). A
TCP listener is ready for synchronization when tcp-accept would not
block; the synchronization result of a TCP listener is the TCP listener
itself.

                                        *tcp-connect*
(tcp-connect  hostname             ~
              port-no             
             [local-hostname      
              local-port-no]) -> input-port? output-port?
  hostname : string? ~ ~
  port-no : port-number? ~ ~
  local-hostname : (or/c string? #f) = #f ~ ~
  local-port-no : (or/c port-number? #f) = #f ~ ~

Attempts to connect as a client to a listening server.  The hostname
argument is the server host’s Internet address name, and port-no is the
port number where the server is listening.

                                        *If*
(If hostname is associated with multiple addresses, they are tried one ~
at a time until a connection succeeds. The name "localhost" generally
specifies the local machine.)

The optional local-hostname and local-port-no specify the client’s
address and port. If both are #f (the default), the client’s address and
port are selected automatically. If local-hostname is not #f, then
local-port-no must be non-#f. If local-port-no is non-#f and
local-hostname is #f, then the given port is used but the address is
selected automatically.

Two values are returned by tcp-connect: an input port and an output
port. Data can be received from the server through the input port and
sent to the server through the output port.  If the server is a Racket
program, it can obtain ports to communicate to the client with
tcp-accept.  These ports are placed into the management of the current
custodian (see [missing]).

Initially, the returned input port is block-buffered, and the returned
output port is block-buffered. Change the buffer mode using
file-stream-buffer-mode.

Both of the returned ports must be closed to terminate the TCP
connection. When both ports are still open, closing the output port with
close-output-port sends a TCP close to the server (which is seen as an
end-of-file if the server reads the connection through a port). In
contrast, tcp-abandon-port (see below) closes the output port, but does
not send a TCP close until the input port is also closed.

Note that the TCP protocol does not support a state where one end is
willing to send but not read, nor does it include an automatic message
when one end of a connection is fully closed. Instead, the other end of
a connection discovers that one end is fully closed only as a response
to sending data; in particular, some number of writes on the still-open
end may appear to succeed, though writes will eventually produce an
error.

If a connection cannot be established by tcp-connect, the
exn:fail:network exception is raised.

                                        *tcp-connect/enable-break*
(tcp-connect/enable-break  hostname         ~
                           port-no         
                          [local-hostname] 
                           local-port-no)  
 -> input-port? output-port?
  hostname : string? ~ ~
  port-no : port-number? ~ ~
  local-hostname : (or/c string? #f) = #f ~ ~
  local-port-no : (or/c port-number? #f) ~ ~

Like tcp-connect, but breaking is enabled (see [missing]) while trying
to connect. If breaking is disabled when tcp-connect/enable-break is
called, then either ports are returned or the exn:break exception is
raised, but not both.

                                        *tcp-accept*
(tcp-accept listener) -> input-port? output-port? ~
  listener : tcp-listener? ~ ~

Accepts a client connection for the server associated with listener. If
no client connection is waiting on the listening port, the call to
tcp-accept will block. (See also tcp-accept-ready?.)

Two values are returned by tcp-accept: an input port and an output port.
Data can be received from the client through the input port and sent to
the client through the output port.  These ports are placed into the
management of the current custodian (see [missing]).

In terms of buffering and connection states, the ports act the same as
ports from tcp-connect.

If a connection cannot be accepted by tcp-accept, or if the listener has
been closed, the exn:fail:network exception is raised.

                                        *tcp-accept/enable-break*
(tcp-accept/enable-break listener) -> input-port? output-port? ~
  listener : tcp-listener? ~ ~

Like tcp-accept, but breaking is enabled (see [missing]) while trying to
accept a connection. If breaking is disabled when
tcp-accept/enable-break is called, then either ports are returned or the
exn:break exception is raised, but not both.

                                        *tcp-accept-ready?*
(tcp-accept-ready? listener) -> boolean? ~
  listener : tcp-listener? ~ ~

Tests whether an unaccepted client has connected to the server
associated with listener. If a client is waiting, the return value is
#t, otherwise it is #f. A client is accepted with the tcp-accept
procedure, which returns ports for communicating with the client and
removes the client from the list of unaccepted clients.

If the listener has been closed, the exn:fail:network exception is
raised.

                                        *tcp-close*
(tcp-close listener) -> void? ~
  listener : tcp-listener? ~ ~

Shuts down the server associated with listener. All unaccepted clients
receive an end-of-file from the server; connections to accepted clients
are unaffected.

If the listener has already been closed, the exn:fail:network exception
is raised.

The listener’s port number may not become immediately available for new
listeners (with the default reuse? argument of tcp-listen). For further
information, see Stevens’s explanation of the TIME_WAIT TCP state.

                                        *tcp-listener?*
(tcp-listener? v) -> boolean? ~
  v : any/c ~ ~

Returns #t if v is a TCP listener created by tcp-listen, #f otherwise.

                                        *tcp-accept-evt*
(tcp-accept-evt listener) -> evt? ~
  listener : tcp-listener? ~ ~

Returns a synchronizable event (see [missing]) that is ready for
synchronization when tcp-accept on listener would not block. The
synchronization result is a list of two items, which correspond to the
two results of tcp-accept. (If the event is not chosen in a sync, no
connections are accepted.) The ports are placed into the management of
the custodian that is the current custodian (see [missing]) at the time
that tcp-accept-evt is called.

                                        *tcp-abandon-port*
(tcp-abandon-port tcp-port) -> void? ~
  tcp-port : tcp-port? ~ ~

Like close-output-port or close-input-port (depending on whether
tcp-port is an input or output port), but if tcp-port is an output port
and its associated input port is not yet closed, then the other end of
the TCP connection does not receive a TCP close message until the input
port is also closed.

The TCP protocol does not include a “no longer reading” state on
connections, so tcp-abandon-port is equivalent to close-input-port on
input TCP ports.

                                        *tcp-addresses*
(tcp-addresses tcp-port [port-numbers?]) ~
 -> (or/c (values string? string?)
          (values string? port-number?
                  string? listen-port-number?))
  tcp-port : (or/c tcp-port? tcp-listener? udp?) ~ ~
  port-numbers? : any/c = #f ~ ~

Returns two strings when port-numbers? is #f (the default). The first
string is the Internet address for the local machine as viewed by the
given TCP port’s connection, for the TCP listener, or the UDP socket.
(When a machine serves multiple addresses, as it usually does if you
count the loopback device, the result is connection-specific or
listener-specific.) If a listener or UDP socket is given and it has no
specific host, the first string result is "0.0.0.0". The second string
is the Internet address for the other end of the connection, or always
"0.0.0.0" for a listener or unconnected UDP socket.

If port-numbers? is true, then four results are returned: a string for
the local machine’s address, an exact integer between 1 and 65535 for
the local machine’s port number, a string for the remote machine’s
address, and an exact integer between 1 and 65535 for the remote
machine’s port number or 0 for a listener.

If the given port, listener, or socket has been closed, the
exn:fail:network exception is raised.

                                        *tcp-port?*
(tcp-port? v) -> boolean? ~
  v : any/c ~ ~

Returns #t if v is a TCP port—which is a port returned by tcp-accept,
tcp-connect, tcp-accept/enable-break, or tcp-connect/enable-break—#f
otherwise.

port-number? : contract? ~ ~

Equivalent to (between/c 1 65535).

Added in version 6.3 of package base.

listen-port-number? : contract? ~ ~

Equivalent to (between/c 0 65535).

Added in version 6.3 of package base.

2. UDP

 (require racket/udp) package: base ~ ~

The bindings documented in this section are provided by the racket/udp
and racket libraries, but not racket/base.

For information about UDP in general, see TCP/IP Illustrated, Volume 1
by W. Richard Stevens.

                                        *udp-open-socket*
(udp-open-socket [family-hostname       ~
                  family-port-no]) -> udp?
  family-hostname : (or/c string? #f) = #f ~ ~
  family-port-no : (or/c port-number? #f) = #f ~ ~

Creates and returns a UDP socket to send and receive datagrams
(broadcasting is allowed). Initially, the socket is not bound or
connected to any address or port.

If family-hostname or family-port-no is not #f, then the socket’s
protocol family is determined from these arguments. The socket is not
bound to the hostname or port number. For example, the arguments might
be the hostname and port to which messages will be sent through the
socket, which ensures that the socket’s protocol family is consistent
with the destination. Alternately, the arguments might be the same as
for a future call to udp-bind!, which ensures that the socket’s protocol
family is consistent with the binding. If neither family-hostname nor
family-port-no is non-#f, then the socket’s protocol family is IPv4.

                                        *udp-bind!*
(udp-bind!  udp-socket           ~
            hostname-string     
            port-no             
           [reuse?])        -> void?
  udp-socket : udp? ~ ~
  hostname-string : (or/c string? #f) ~ ~
  port-no : listen-port-number? ~ ~
  reuse? : any/c = #f ~ ~

Binds an unbound udp-socket to the local port number port-no.  If
port-no is 0 the udp-socket is bound to an ephemeral port, which can be
determined by calling udp-addresses.

If hostname-string is #f, then the socket accepts connections to all of
the listening machine’s IP addresses at port-no. Otherwise, the socket
accepts connections only at the IP address associated with the given
name. For example, providing "127.0.0.1" as hostname-string typically
creates a listener that accepts only connections to "127.0.0.1" from the
local machine.

A socket cannot receive datagrams until it is bound to a local address
and port. If a socket is not bound before it is used with a sending
procedure udp-send, udp-send-to, etc., the sending procedure binds the
socket to a random local port. Similarly, if an event from udp-send-evt
or udp-send-to-evt is chosen for a synchronization (see [missing]), the
socket is bound; if the event is not chosen, the socket may or may not
become bound.

The binding of a bound socket cannot be changed, with one exception: on
some systems, if the socket is bound automatically when sending, if the
socket is disconnected via udp-connect!, and if the socket is later used
again in a send, then the later send may change the socket’s automatic
binding.

If udp-socket is already bound or closed, the exn:fail:network exception
is raised.

If the reuse? argument is true, then udp-bind! will set the SO_REUSEADDR
socket option before binding, permitting the sharing of access to a UDP
port between many processes on a single machine when using UDP
multicast.

                                        *udp-connect!*
(udp-connect! udp-socket           ~
              hostname-string     
              port-no)        -> void?
  udp-socket : udp? ~ ~
  hostname-string : (or/c string? #f) ~ ~
  port-no : (or/c port-number? #f) ~ ~

Connects the socket to the indicated remote address and port if
hostname-string is a string and port-no is an exact integer.

If hostname-string is #f, then port-no also must be #f, and the port is
disconnected (if connected). If one of hostname-string or port-no is #f
and the other is not, the exn:fail:contract exception is raised.

A connected socket can be used with udp-send (not udp-send-to), and it
accepts datagrams only from the connected address and port. A socket
need not be connected to receive datagrams.  A socket can be connected,
re-connected, and disconnected any number of times.

If udp-socket is closed, the exn:fail:network exception is raised.

                                        *udp-send-to*
(udp-send-to  udp-socket      ~
              hostname       
              port-no        
              bstr           
             [start-pos      
              end-pos])  -> void?
  udp-socket : udp? ~ ~
  hostname : string? ~ ~
  port-no : port-number? ~ ~
  bstr : bytes? ~ ~
  start-pos : exact-nonnegative-integer? = 0 ~ ~
  end-pos : exact-nonnegative-integer? = (bytes-length bstr) ~ ~

Sends (subbytes bytes start-pos end-pos) as a datagram from the
unconnected udp-socket to the socket at the remote machine
hostname-address on the port port-no. The udp-socket need not be bound
or connected; if it is not bound, udp-send-to binds it to a random local
port. If the socket’s outgoing datagram queue is too full to support the
send, udp-send-to blocks until the datagram can be queued.

If start-pos is greater than the length of bstr, or if end-pos is less
than start-pos or greater than the length of bstr, the exn:fail:contract
exception is raised.

If udp-socket is closed or connected, the exn:fail:network exception is
raised.

                                        *udp-send*
(udp-send udp-socket bstr [start-pos end-pos]) -> void? ~
  udp-socket : udp? ~ ~
  bstr : bytes? ~ ~
  start-pos : exact-nonnegative-integer? = 0 ~ ~
  end-pos : exact-nonnegative-integer? = (bytes-length bstr) ~ ~

Like udp-send-to, except that udp-socket must be connected, and the
datagram goes to the connection target.  If udp-socket is closed or
unconnected, the exn:fail:network exception is raised.

                                        *udp-send-to**
(udp-send-to*  udp-socket      ~
               hostname       
               port-no        
               bstr           
              [start-pos      
               end-pos])  -> boolean?
  udp-socket : udp? ~ ~
  hostname : string? ~ ~
  port-no : port-number? ~ ~
  bstr : bytes? ~ ~
  start-pos : exact-nonnegative-integer? = 0 ~ ~
  end-pos : exact-nonnegative-integer? = (bytes-length bstr) ~ ~

Like udp-send-to, but never blocks; if the socket’s outgoing queue is
too full to support the send, #f is returned, otherwise the datagram is
queued and the result is #t.

                                        *udp-send**
(udp-send* udp-socket bstr [start-pos end-pos]) -> boolean? ~
  udp-socket : udp? ~ ~
  bstr : bytes? ~ ~
  start-pos : exact-nonnegative-integer? = 0 ~ ~
  end-pos : exact-nonnegative-integer? = (bytes-length bstr) ~ ~

Like udp-send, except that (like udp-send-to) it never blocks and
returns #f or #t.

                                        *udp-send-to/enable-break*
(udp-send-to/enable-break  udp-socket      ~
                           hostname       
                           port-no        
                           bstr           
                          [start-pos      
                           end-pos])  -> void?
  udp-socket : udp? ~ ~
  hostname : string? ~ ~
  port-no : port-number? ~ ~
  bstr : bytes? ~ ~
  start-pos : exact-nonnegative-integer? = 0 ~ ~
  end-pos : exact-nonnegative-integer? = (bytes-length bstr) ~ ~

Like udp-send-to, but breaking is enabled (see [missing]) while trying
to send the datagram. If breaking is disabled when
udp-send-to/enable-break is called, then either the datagram is sent or
the exn:break exception is raised, but not both.

                                        *udp-send/enable-break*
(udp-send/enable-break  udp-socket      ~
                        bstr           
                       [start-pos      
                        end-pos])  -> void?
  udp-socket : udp? ~ ~
  bstr : bytes? ~ ~
  start-pos : exact-nonnegative-integer? = 0 ~ ~
  end-pos : exact-nonnegative-integer? = (bytes-length bstr) ~ ~

Like udp-send, except that breaks are enabled like
udp-send-to/enable-break.

                                        *udp-receive!*
(udp-receive!  udp-socket      ~
               bstr           
              [start-pos      
               end-pos])  -> exact-nonnegative-integer?
                             string?
                             port-number?
  udp-socket : udp? ~ ~
  bstr : (and/c bytes? (not immutable?)) ~ ~
  start-pos : exact-nonnegative-integer? = 0 ~ ~
  end-pos : exact-nonnegative-integer? = (bytes-length bstr) ~ ~

Accepts up to end-pos-start-pos bytes of udp-socket’s next incoming
datagram into bstr, writing the datagram bytes starting at position
start-pos within bstr. The udp-socket must be bound to a local address
and port (but need not be connected). If no incoming datagram is
immediately available, udp-receive! blocks until one is available.

Three values are returned: the number of received bytes (between 0 and
end-pos-start-pos, a hostname string indicating the source address of
the datagram, and an integer indicating the source port of the datagram.
If the received datagram is longer than end-pos-start-pos bytes, the
remainder is discarded.

If start-pos is greater than the length of bstr, or if end-pos is less
than start-pos or greater than the length of bstr, the exn:fail:contract
exception is raised.

                                        *udp-receive!**
(udp-receive!*  udp-socket  ~
                bstr       
               [start-pos  
                end-pos])  
 -> (or/c exact-nonnegative-integer? #f)
    (or/c string? #f)
    (or/c port-number? #f)
  udp-socket : udp? ~ ~
  bstr : (and/c bytes? (not immutable?)) ~ ~
  start-pos : exact-nonnegative-integer? = 0 ~ ~
  end-pos : exact-nonnegative-integer? = (bytes-length bstr) ~ ~

Like udp-receive!, except that it never blocks. If no datagram is
available, the three result values are all #f.

                                        *udp-receive!/enable-break*
(udp-receive!/enable-break  udp-socket  ~
                            bstr       
                           [start-pos  
                            end-pos])  
 -> exact-nonnegative-integer?
    string?
    port-number?
  udp-socket : udp? ~ ~
  bstr : (and/c bytes? (not immutable?)) ~ ~
  start-pos : exact-nonnegative-integer? = 0 ~ ~
  end-pos : exact-nonnegative-integer? = (bytes-length bstr) ~ ~

Like udp-receive!, but breaking is enabled (see [missing]) while trying
to receive the datagram. If breaking is disabled when
udp-receive!/enable-break is called, then either a datagram is received
or the exn:break exception is raised, but not both.

                                        *udp-set-receive-buffer-size!*
(udp-set-receive-buffer-size! udp-socket      ~
                              size)      -> void?
  udp-socket : udp? ~ ~
  size : exact-positive-integer? ~ ~

Set the receive buffer size (SO_RCVBUF) for udp-socket. Using a larger
buffer can minimize packet loss that can occur due to slow polling of a
connection, including during a major garbage collection.

If size is greater than the maximum allowed by the system, the
exn:fail:network exception is raised.

Added in version 7.1.0.11 of package base.

                                        *udp-close*
(udp-close udp-socket) -> void? ~
  udp-socket : udp? ~ ~

Closes udp-socket, discarding unreceived datagrams.  If the socket is
already closed, the exn:fail:network exception is raised.

                                        *udp?*
(udp? v) -> boolean? ~
  v : any/c ~ ~

Returns #t if v is a socket created by udp-open-socket, #f otherwise.

                                        *udp-bound?*
(udp-bound? udp-socket) -> boolean? ~
  udp-socket : udp? ~ ~

Returns #t if udp-socket is bound to a local address and port, #f
otherwise.

                                        *udp-connected?*
(udp-connected? udp-socket) -> boolean? ~
  udp-socket : udp? ~ ~

Returns #t if udp-socket is connected to a remote address and port, #f
otherwise.

                                        *udp-send-ready-evt*
(udp-send-ready-evt udp-socket) -> evt? ~
  udp-socket : udp? ~ ~

Returns a synchronizable event (see [missing]) that is in a blocking
state when udp-send-to on udp-socket would block. The synchronization
result is the event itself.

                                        *udp-receive-ready-evt*
(udp-receive-ready-evt udp-socket) -> evt? ~
  udp-socket : udp? ~ ~

Returns a synchronizable event (see [missing]) that is in a blocking
state when udp-receive! on udp-socket would block. The synchronization
result is the event itself.

                                        *udp-send-to-evt*
(udp-send-to-evt  udp-socket      ~
                  hostname       
                  port-no        
                  bstr           
                 [start-pos      
                  end-pos])  -> evt?
  udp-socket : udp? ~ ~
  hostname : string? ~ ~
  port-no : port-number? ~ ~
  bstr : bytes? ~ ~
  start-pos : exact-nonnegative-integer? = 0 ~ ~
  end-pos : exact-nonnegative-integer? = (bytes-length bstr) ~ ~

Returns a synchronizable event. The event is in a blocking state when
udp-send-to on udp-socket would block. Otherwise, if the event is chosen
in a synchronization, data is sent as for (udp-send-to udp-socket
hostname-address port-no bstr start-pos end-pos), and the
synchronization result is #<void>. (No bytes are sent if the event is
not chosen.)

                                        *udp-send-evt*
(udp-send-evt  udp-socket      ~
               bstr           
              [start-pos      
               end-pos])  -> evt?
  udp-socket : udp? ~ ~
  bstr : bytes? ~ ~
  start-pos : exact-nonnegative-integer? = 0 ~ ~
  end-pos : exact-nonnegative-integer? = (bytes-length bstr) ~ ~

Returns a synchronizable event. The event is ready for synchronization
when udp-send on udp-socket would not block. Otherwise, if the event is
chosen in a synchronization, data is sent as for (udp-send-to udp-socket
bstr start-pos end-pos), and the synchronization result is #<void>. (No
bytes are sent if the event is not chosen.) If udp-socket is closed or
unconnected, the exn:fail:network exception is raised during a
synchronization attempt.

                                        *udp-receive!-evt*
(udp-receive!-evt  udp-socket      ~
                   bstr           
                  [start-pos      
                   end-pos])  -> evt?
  udp-socket : udp? ~ ~
  bstr : (and/c bytes? (not immutable?)) ~ ~
  start-pos : exact-nonnegative-integer? = 0 ~ ~
  end-pos : exact-nonnegative-integer? = (bytes-length bstr) ~ ~

Returns a synchronizable event. The event is ready for synchronization
when udp-receive on udp-socket would not block. Otherwise, if the event
is chosen in a synchronization, data is received into bstr as for
(udp-receive! udp-socket bytes start-pos end-pos), and the
synchronization result is a list of three values, corresponding to the
three results from udp-receive!. (No bytes are received and the bstr
content is not modified if the event is not chosen.)

                                        *udp-addresses*
(udp-addresses udp-port [port-numbers?]) ~
 -> (or/c (values string? string?)
          (values string? listen-port-number?
                  string? listen-port-number?))
  udp-port : udp? ~ ~
  port-numbers? : any/c = #f ~ ~

Returns two strings when port-numbers? is #f (the default). The first
string is the Internet address for the local machine a viewed by the
given UDP socket’s connection. (For most machines, the answer
corresponds to the current machine’s only Internet address, but when a
machine serves multiple addresses, the result is connection-specific.)
The second string is the Internet address for the other end of the
connection.

If port-numbers? is true, then four results are returned: a string for
the local machine’s address, an exact integer between 1 and 65535 for
the local machine’s port number or 0 if the socket is unbound, a string
for the remote machine’s address, and an exact integer between 1 and
65535 for the remote machine’s port number or 0 if the socket is
unconnected.

If the given port has been closed, the exn:fail:network exception is
raised.

                                        *udp-set-ttl!*
(udp-set-ttl! udp-socket ttl) -> void? ~
  udp-socket : udp? ~ ~
  ttl : byte? ~ ~
(udp-ttl udp-socket) -> byte?
  udp-socket : udp? ~ ~

Time-to-live settings correspond to the IP_TTL setting of the socket.

Sets or retrieves the current time-to-live setting of udp-socket.

Added in version 7.5.0.5 of package base.

                                        *udp-multicast-join-group!*
(udp-multicast-join-group! udp-socket          ~
                           multicast-addr     
                           hostname)      -> void?
  udp-socket : udp? ~ ~
  multicast-addr : string? ~ ~
  hostname : (or/c string? #f) ~ ~
(udp-multicast-leave-group! udp-socket         
                            multicast-addr     
                            hostname)      -> void?
  udp-socket : udp? ~ ~
  multicast-addr : string? ~ ~
  hostname : (or/c string? #f) ~ ~

Adds or removes udp-socket to a named multicast group.

The multicast-addr argument must be a valid IPv4 multicast IP address;
for example, "224.0.0.251" is the appropriate address for the mDNS
protocol. The hostname argument selects the interface that the socket
uses to receive (not send) multicast datagrams; if hostname is #f or
"0.0.0.0", the kernel selects an interface automatically.

Leaving a group requires the same multicast-addr and hostname arguments
that were used to join the group.

                                        *udp-multicast-interface*
(udp-multicast-interface udp-socket) -> string? ~
  udp-socket : udp? ~ ~
(udp-multicast-set-interface! udp-socket     
                              hostname)  -> void?
  udp-socket : udp? ~ ~
  hostname : (or/c string? #f) ~ ~

Retrieves or sets the interface that udp-socket uses to send (not
receive) multicast datagrams. If the result or hostname is either #f or
"0.0.0.0", the kernel automatically selects an interface when a
multicast datagram is sent.

                                        *udp-multicast-set-loopback!*
(udp-multicast-set-loopback! udp-socket      ~
                             loopback?) -> void?
  udp-socket : udp? ~ ~
  loopback? : any/c ~ ~
(udp-multicast-loopback? udp-socket) -> boolean?
  udp-socket : udp? ~ ~

Loopback settings correspond to the IP_MULTICAST_LOOP setting of the
socket.

Sets or checks whether udp-socket receives its own multicast datagrams:
a #t result or a true value for loopback? indicates that self-receipt is
enabled, and #f indicates that self-receipt is disabled.

                                        *udp-multicast-set-ttl!*
(udp-multicast-set-ttl! udp-socket ttl) -> void? ~
  udp-socket : udp? ~ ~
  ttl : byte? ~ ~
(udp-multicast-ttl udp-socket) -> byte?
  udp-socket : udp? ~ ~

Time-to-live settings correspond to the IP_MULTICAST_TTL setting of the
socket.

Sets or retrieves the current time-to-live setting of udp-socket.

The time-to-live setting should almost always be 1, and it is important
that this number is as low as possible. In fact, these functions seldom
should be used at all. See the documentation for your platform’s IP
stack.
