SICP Picture Language                   *sicp-pict*

 (require sicp-pict) package: sicp ~



1. Introduction

The SICP Picture Language is a small language for drawing pictures. It
shows the power of data abstraction and closure. The picture language
stems from Peter Henderson’s 1982 paper "Functional Geometry" and was
included by Hal Abelson in "Structure and Interpretation of Computer
Programs".

The basic concept of the picture language is a painter, which draws its
image (shifted and scaled) within a frame given by a parallelogram.
Painters can be combined to construct new painters.

Before using this package, read section 2.2.4 of SICP, which is an
excellent introduction to the ideas of the picture language. This manual
is meant as a reference guide.

Peter Henderson has written an updated version of Functional Geometry,
which explains how to construct the Escher fish image.

2. Example

Using sicp-pict from a #lang sicp program:

  #lang sicp
  (#%require sicp-pict)
  (paint einstein)

Using sicp-pict from a #lang racket program:

  #lang racket
  (require sicp-pict)
  (paint einstein)

From the REPL:

  > (require sicp-pict)
  > (paint (number->painter 0))
  > (paint diagonal-shading)
  > (paint (below (beside diagonal-shading
                  (rotate90 diagonal-shading))
           (beside (rotate270 diagonal-shading)
                   (rotate180 diagonal-shading))))
  > (paint einstein)

3. Vectors

A mathematical vector is called a vect here, in order to avoid confusion
with the builtin vectors of Scheme.

                                        *vect?*
(vect? v) -> boolean? ~
  v : any/c ~

Returns #t if v is a vect, #f otherwise.

                                        *make-vect*
(make-vect x y) -> vect? ~
  x : real? ~
  y : real? ~

Constructs a vect with the given coordinates.

                                        *vector-xcor*
(vector-xcor v) -> real? ~
  v : vect? ~

Returns the x-coordinate.

                                        *vector-ycor*
(vector-ycor v) -> real? ~
  v : vect? ~

Returns the y-coordinate.

                                        *vector-add*
(vector-add v w) -> vect? ~
  v : vect? ~
  w : vect? ~

Adds the two vects by adding their coordinates pairwise.

                                        *vector-sub*
(vector-sub v w) -> vect? ~
  v : vect? ~
  w : vect? ~

Subtracts the two vects by subtracting their coordinates pairwise.

                                        *vector-scale*
(vector-scale s v) -> vect? ~
  s : real? ~
  v : vect? ~

Scales the vect by multiplying each coordinate of v with the number s.

zero-vector : vect? ~

An alias for (make-vect 0.0 0.0)

4. Frames

A frame is descibed by three vectors.

    ^
    | frame edge2 vector
    |
   _|__________>
   /|         frame edge1 vector
  /
 /
/ frame origin pointer

                                        *frame?*
(frame? f) -> boolean? ~
  f : any/c ~

Returns #t is f is a frame, #f otherwise.

                                        *make-frame*
(make-frame origin edge1 edge2) -> frame? ~
  origin : vect? ~
  edge1 : vect? ~
  edge2 : vect? ~

Constructs a frame from a frame origin vector and two frame edge
vectors.

                                        *frame-origin*
(frame-origin f) -> vect? ~
  f : frame? ~
(frame-edge1 f) -> vect?
  f : frame? ~
(frame-edge2 f) -> vect?
  f : frame? ~

Extracts the origin, first edge or second edge from a frame.

                                        *make-relative-frame*
(make-relative-frame origin corner1 corner2) ~
 -> (frame? . -> . frame?)
  origin : vect? ~
  corner1 : vect? ~
  corner2 : vect? ~

The function make-relative-frame provides a convenient way to transform
frames. Given a frame and three points: origin, corner1, and corner2
(expressed in frame coordinates), it returns a new frame with those
corners.

                                        *frame-coord-map*
(frame-coord-map f) -> (vect? . -> . vect?) ~
  f : frame? ~

Each frame determines a system of "frame coordinates" (x,y) where (0,0)
is the origin of the frame, x represents the displacement along the
first edge (as a fraction of the length of the edge) and y is the
displacement along the second edge.

The frame coordinate map is returned by frame-coord-map. E.g. these
expression return the same value:

* ((frame-coord-map a-frame) (make-vect 0 0))

* (frame-origin a-frame)

5. Segments

A pair of vects determines a directed line segment (or simply a segment)
which runs from the endpoint of the first vect to the endpoint of the
second vect.

                                        *segment?*
(segment? s) -> boolean? ~
  s : any/c ~

Returns #t if s is a segment, #f otherwise.

                                        *make-segment*
(make-segment from to) -> segment? ~
  from : vect? ~
  to : vect? ~

Constructs a segment from from to to.

                                        *segment-start*
(segment-start s) -> vect? ~
  s : segment? ~
(segment-end s) -> vect?
  s : segment? ~

Returns the start and the end of a segment s respectively.

                                        *vects->segments*
(vects->segments lov) -> (listof segment?) ~
  lov : (sequence/c vect?) ~

Partitions consecutive vect in lov into chunks of size 2 and returns a
list of segments where each segment is constructed by each chunk. If
lov’s length is odd, the last element will be discarded.

Example:

  >
  (vects->segments (list (make-vect 1 2) (make-vect 3 4) (make-vect 5 6) (make-vect 7 8)))
  (list
   (segment (vect 1 2) (vect 3 4))
   (segment (vect 3 4) (vect 5 6))
   (segment (vect 5 6) (vect 7 8)))

6. Primitive Painters

Painters take a frame and draw an image, transformed to fit inside the
frame.

Note that our implementation doesn’t have a concept of pictures, so
picture->painter which is commonly found in other implementations
doesn’t exist in our implementation. If you wish to load an image file,
use bitmap->painter.

painter/c : contract? ~

A contract that recognizes a painter. This is the same as (-> frame?
any/c).

                                        *number->painter*
(number->painter color) -> painter/c ~
  color : (and/c natural-number/c (<=/c 255)) ~

Constructs a painter that fills the frame with a gray color indicated by
the number. 0 is black and 255 is white.

                                        *color->painter*
(color->painter color) -> painter/c ~
  color : (is-a?/c color%) ~

Constructs a painter that fills the frame with the given color.

                                        *segments->painter*
(segments->painter los) -> painter/c ~
  los : (sequence/c segment?) ~

Constructs a painter that draws a stick figure given by the segments
(w.r.t. the unit square).

                                        *vects->painter*
(vects->painter los) -> painter/c ~
  los : (sequence/c vect?) ~

Constructs a painter that draws a stick figure given by the vects
(w.r.t. the unit square).

                                        *procedure->painter*
(procedure->painter f) -> painter/c ~
  f : procedure? ~

Creates painters from procedures.  We assume that the procedure f is
defined on the unit square.

Then to plot a point p in the target frame, we find the inverse image
T^-1(p) of p under the transformation that maps the unit square to the
target, and find the value of f at T-1(p).

                                        *bitmap->painter*
(bitmap->painter bm) -> painter/c ~
  bm : (or/c path-string? (is-a?/c bitmap%)) ~
(load-painter bm) -> painter/c
  bm : (or/c path-string? (is-a?/c bitmap%)) ~

Uses an image given by bm (either a path to the image or a bitmap
object) to create a painter.

7. Higher Order Painters

                                        *transform-painter*
(transform-painter origin corner1 corner2) ~
 -> (painter/c . -> . painter/c)
  origin : vect? ~
  corner1 : vect? ~
  corner2 : vect? ~

Returns a function that takes a painter as argument and returns a
painter that is just like the original painter but is on the transformed
frame characterized by origin, corner1, and corner2.

                                        *flip-horiz*
(flip-horiz p) -> painter/c ~
  p : painter/c ~

Returns a painter that flips the image horizontally.

                                        *flip-vert*
(flip-vert p) -> painter/c ~
  p : painter/c ~

Returns a painter that flips the image vertically.

                                        *rotate90*
(rotate90 p) -> painter/c ~
  p : painter/c ~
(rotate180 p) -> painter/c
  p : painter/c ~
(rotate270 p) -> painter/c
  p : painter/c ~

Returns a painter that rotates the image.

                                        *beside*
(beside p1 p2) -> painter/c ~
  p1 : painter/c ~
  p2 : painter/c ~

Constructs a painter that paints the images side-by-side.

                                        *below*
(below p1 p2) -> painter/c ~
  p1 : painter/c ~
  p2 : painter/c ~

Constructs a painter that paints the second image below the first.

                                        *above3*
(above3 p1 p2 p3) -> painter/c ~
  p1 : painter/c ~
  p2 : painter/c ~
  p3 : painter/c ~

Constructs a painter that paints the images one above the other.

                                        *superpose*
(superpose p1 p2) -> painter/c ~
  p1 : painter/c ~
  p2 : painter/c ~

Constructs a painter that paints the two images on top of each other.

8. Simple Built-In Painters

The following painter values are built-in:

black : painter/c ~
white : painter/c ~
gray : painter/c ~

Fills the frame with black (0), white (255) or gray (150).

diagonal-shading : painter/c ~

Fills the frame with a shades of gray. The color transition goes from
black in the upper left corner is black, to gray in the bottom right
corner.

mark-of-zorro : painter/c ~

Draws the Mark of Zorro.

einstein : painter/c ~

Draws an image of Einstein.

                                        *escher*
(escher) -> painter/c ~

Draws Escher’s Square Limit.

9. Painting

Painting turns a painter into an image snip which can be displayed in
DrRacket automatically.

                                        *paint*
(paint p [#:width width #:height height]) -> (is-a?/c image-snip%) ~ ~
  p : painter/c ~
  width : (and/c positive? integer?) = 200 ~
  height : (and/c positive? integer?) = 200 ~

Returns an image snip that contains the painter’s image with the
specified width and height.

                                        *paint-hi-res*
(paint-hi-res  p                      ~
              [#:width width          ~
               #:height height]) -> (is-a?/c image-snip%) ~
  p : painter/c ~
  width : (and/c positive? integer?) = 200 ~
  height : (and/c positive? integer?) = 200 ~
(paint-hires  p                     
             [#:width width          ~
              #:height height]) -> (is-a?/c image-snip%) ~
  p : painter/c ~
  width : (and/c positive? integer?) = 200 ~
  height : (and/c positive? integer?) = 200 ~

Aliases of paint. They are provided for compatibility with old texts.
