Installation-Specific Launchers

A launcher is similar to a stand-alone executable, but a launcher is
usually smaller and can be created more quickly, because it depends
permanently on the local Racket installation and the program’s sources.
In the case of Unix, a launcher is simply a shell script that runs
racket or gracket. Launchers cannot be packaged into a distribution
using raco distribute. The raco exe command creates a launcher when the
-l or --launcher flag is specified.

 (require launcher/launcher) package: base ~

The launcher/launcher library provides functions for creating launchers.

1. Creating Launchers

                                        *make-gracket-launcher*
(make-gracket-launcher  args                             ~
                        dest                            
                       [aux                             
                        #:tether-mode tether-mode]) -> void? ~
  args : (listof string?) ~
  dest : path-string? ~
  aux : (listof (cons/c symbol? any/c)) = null ~
  tether-mode : (or/c 'addon 'config #f) = 'addon ~

Creates the launcher dest, which starts GRacket with the command-line
arguments specified as strings in args. Extra arguments passed to the
launcher at run-time are appended (modulo special Unix/X flag handling,
as described below) to this list and passed on to GRacket. If dest
exists already, as either a file or directory, it is replaced.

The optional aux argument is an association list for platform-specific
options (i.e., it is a list of pairs where the first element of the pair
is a key symbol and the second element is the value for that key). See
also build-aux-from-path. See create-embedding-executable for a list
that applies to both stand-alone executables and launchers on Windows
and Mac OS GRacket; the following additional associations apply to
launchers:

* 'independent? (Windows) — a boolean; #t creates an old-style launcher
  that works with any Racket or GRacket binary, like raco.exe. No other
  aux associations are used for an old-style launcher.

* 'exe-name (Mac OS, 'script-3m, 'script-cgc or 'script-cs variant) —
  provides the base name for a '3m-/'cgc-/'cs-variant launcher, which
  the script will call ignoring args. If this name is not provided, the
  script will go through the GRacket executable as usual.

* 'exe-is-gracket (when 'exe-name is used) — indicates that 'exe-name
  refers to the GRacket executable, which is potentially in a "lib"
  subdirectory instead of with other GUI applications.

* 'relative? (all platforms) — a boolean, where  #t means that the
  generated launcher should find the  base GRacket executable through a
  relative path.

* 'install-mode (Windows, Unix) — either 'main, 'user, 'config-tethered,
  or 'addon-tethered, indicates that the launcher is being installed to
  an installation-wide place, a user-specific place, an
  installation-wide place that embeds the configuration path, or a
  specific place that embeds an addon-directory path; the install mode,
  in turn, determines whether and where to record 'start-menu,
  'extension-registry, and/or 'desktop information.

* 'start-menu (Windows) — a boolean or real number; #t indicates that
  the launcher should be in the Start menu by an installer that includes
  the launcher. A number value is treated like #t, but also requests
  that the installer automatically start the application, where the
  number determines a precedence relative to other launchers that may
  request starting.  A 'start-menu value is used only when 'install-mode
  is also specified.

* 'extension-register (Windows) — a list of document types for
  file-extension registrations to be performed by an installer. Each
  document type is described by a list of six items:

  * a human-readable string describing the document type, such as
    "Racket Document";

  * a string to use as a key for the document type, such as
    "Racket.Document";

  * a list of strings, where each string is a file extension without the
    dot, such as '("rkt" "rktl" "rktd");

  * a path to a file that supplies the icon, such as "doc.ico";

  * a string to represent the command line to handle a document with a
    matching extension, such as "\"%1\"", where the string will be
    prefixed with a path to the launcher, and where %1 will be replaced
    with the document path

  An 'extension-registry value is used only when 'install-mode is also
  specified.

* 'desktop (Unix) — a string containing the content of a ".desktop" file
  for the launcher, where Exec and Icon entries are added automatically.
  If an Exec entry exists in the string, and if its value starts with a
  non-empty sequence of alpha-numeric ASCII characters followed by a
  space, then the space and remainder of the value is appended to the
  automatically generated value. The ".desktop" file is written to the
  directory produced by (find-apps-dir) or (find-user-apps-dir). A
  'desktop value is used only when 'install-mode is also specified.

* 'png (Unix) : An icon file path (suffix ".png") to be referenced by a
  ".desktop" file (if any); a 'png value takes precedence over a 'ico
  value, but neither is used unless a 'desktop value is also present.

* 'ico (Unix, in addition to more general Windows use) : An icon file
  path (suffix ".ico") that is used in the same way as 'png if no 'png
  value is available.

For Unix/X, the script created by make-mred-launcher detects and handles
X Windows flags specially when they appear as the initial arguments to
the script. Instead of appending these arguments to the end of args,
they are spliced in after any X Windows flags already listed in args.
The remaining arguments (i.e., all script flags and arguments after the
last X Windows flag or argument) are then appended after the spliced
args.

The tether-mode argument indicates how much to preserve the current
installation’s tethering to a configuration directory and/or addon
directory based on (find-addon-tether-console-bin-dir) and
(find-config-tether-console-bin-dir). The 'addon mode allows full
tethering, the 'config mode allows only configuration-directory
tethering, and the #f mode disables tethering.

Changed in version 6.5.0.2 of package base: Added the #:tether-mode
argument.

                                        *make-racket-launcher*
(make-racket-launcher args dest [aux]) -> void? ~
  args : (listof string?) ~
  dest : path-string? ~
  aux : (listof (cons/c symbol? any/c)) = null ~

Like make-gracket-launcher, but for starting Racket. On Mac OS, the
'exe-name aux association is ignored.

                                        *make-gracket-program-launcher*
(make-gracket-program-launcher file            ~
                               collection     
                               dest)      -> void?
  file : string? ~
  collection : string? ~
  dest : path-string? ~

Calls make-gracket-launcher with arguments that start the GRacket
program implemented by file in collection: (list "-l-" (string-append
collection "/" file)). The aux argument to make-gracket-launcher is
generated by stripping the suffix (if any) from file, adding it to the
path of collection, and passing the result to build-aux-from-path.

                                        *make-racket-program-launcher*
(make-racket-program-launcher file            ~
                              collection     
                              dest)      -> void?
  file : string? ~
  collection : string? ~
  dest : path-string? ~

Like make-gracket-program-launcher, but for make-racket-launcher.

                                        *install-gracket-program-launcher*
(install-gracket-program-launcher file            ~
                                  collection     
                                  name)      -> void?
  file : string? ~
  collection : string? ~
  name : string? ~

Same as

  (make-gracket-program-launcher
   file collection
   (gracket-program-launcher-path name))

                                        *install-racket-program-launcher*
(install-racket-program-launcher file            ~
                                 collection     
                                 name)      -> void?
  file : string? ~
  collection : string? ~
  name : string? ~

Same as

  (make-racket-program-launcher
   file collection
   (racket-program-launcher-path name))

                                        *make-mred-launcher*
(make-mred-launcher args dest [aux]) -> void? ~
  args : (listof string?) ~
  dest : path-string? ~
  aux : (listof (cons/c symbol? any/c)) = null ~
(make-mred-program-launcher file           
                            collection     
                            dest)      -> void?
  file : string? ~
  collection : string? ~
  dest : path-string? ~
(install-mred-program-launcher file           
                               collection     
                               name)      -> void?
  file : string? ~
  collection : string? ~
  name : string? ~

Backward-compatible version of make-gracket-launcher, etc., that adds
"-I" "scheme/gui/init" to the start of the command-line arguments.

                                        *make-mzscheme-launcher*
(make-mzscheme-launcher args dest [aux]) -> void? ~
  args : (listof string?) ~
  dest : path-string? ~
  aux : (listof (cons/c symbol? any/c)) = null ~
(make-mzscheme-program-launcher file           
                                collection     
                                dest)      -> void?
  file : string? ~
  collection : string? ~
  dest : path-string? ~
(install-mzscheme-program-launcher file           
                                   collection     
                                   name)      -> void?
  file : string? ~
  collection : string? ~
  name : string? ~

Backward-compatible version of make-racket-launcher, etc., that adds
"-I" "scheme/init" to the start of the command-line arguments.

2. Launcher Path and Platform Conventions

                                        *gracket-program-launcher-path*
(gracket-program-launcher-path  name                       ~
                               [#:user? user?              ~
                                #:tethered? tethered?      ~
                                #:console? console?]) -> path? ~
  name : string? ~
  user? : any/c = #f ~
  tethered? : any/c = #f ~
  console? : any/c = #f ~

Returns a pathname for an executable called something like name in

* the Racket installation — when user? is #f and tethered? is #f;

* the user’s Racket executable directory — when user? is #t and
  tethered? is #f;

* an additional executable directory for executables tethered to a
  particular configuration directory — when user? is #f and tethered? is
  #t; or

* an additional executable directory for executables tethered to a
  particular addon and configuration directory — when user? is #t and
  tethered? is #t.

For Windows, the ".exe" suffix is automatically appended to name. For
Unix, name is changed to lowercase, whitespace is changed to -, and the
path includes the "bin" subdirectory of the Racket installation. For Mac
OS, the ".app" suffix is appended to name.

If console? is true, then the path is in the console executable
directory, such as the one reported by (find-console-bin-dir), instead
of the GUI executable directory, such as the one reported by
(find-gui-bin-dir).

Changed in version 6.5.0.2 of package base: Added the #:tethered?
argument. Changed in version 6.8.0.2: Added the #:console? argument.

                                        *racket-program-launcher-path*
(racket-program-launcher-path  name                       ~
                              [#:user? user?              ~
                               #:tethered? tethered?      ~
                               #:console? console?]) -> path? ~
  name : string? ~
  user? : any/c = #f ~
  tethered? : any/c = #f ~
  console? : any/c = #f ~

Returns the same path as (gracket-program-launcher-path name #:user?
user? #:tethered tethered? #:console? console?).

Changed in version 6.5.0.2 of package base: Added the #:tethered?
argument. Changed in version 6.8.0.2: Added the #:console? argument.

                                        *gracket-launcher-is-directory?*
(gracket-launcher-is-directory?) -> boolean? ~

Returns #t if GRacket launchers for the current platform are directories
from the user’s perspective. For all currently supported platforms, the
result is #f.

                                        *racket-launcher-is-directory?*
(racket-launcher-is-directory?) -> boolean? ~

Like gracket-launcher-is-directory?, but for Racket launchers.

                                        *gracket-launcher-is-actually-directory?*
(gracket-launcher-is-actually-directory?) -> boolean? ~

Returns #t if GRacket launchers for the current platform are implemented
as directories from the filesystem’s perspective. The result is #t for
Mac OS, #f for all other platforms.

                                        *racket-launcher-is-actually-directory?*
(racket-launcher-is-actually-directory?) -> boolean? ~

Like gracket-launcher-is-actually-directory?, but for Racket launchers.
The result is #f for all platforms.

                                        *gracket-launcher-add-suffix*
(gracket-launcher-add-suffix path-string?) -> path? ~
  path-string? : path ~

Returns a path with a suitable executable suffix added, if it’s not
present already.

                                        *racket-launcher-add-suffix*
(racket-launcher-add-suffix path-string?) -> path? ~
  path-string? : path ~

Like gracket-launcher-add-suffix, but for Racket launchers.

                                        *gracket-launcher-put-file-extension+style+filters*
(gracket-launcher-put-file-extension+style+filters) ~
 -> (or/c string? false/c)
    (listof (one-of/c 'packages 'enter-packages))
    (listof (list/c string? string?))

Returns three values suitable for use as the extension, style, and
filters arguments to put-file, respectively.

If GRacket launchers for the current platform were directories from the
user’s perspective, the style result is suitable for use with
get-directory, and the extension result may be a string indicating a
required extension for the directory name.

                                        *racket-launcher-put-file-extension+style+filters*
(racket-launcher-put-file-extension+style+filters) ~
 -> (or/c string? false/c)
    (listof (one-of/c 'packages 'enter-packages))
    (listof (list/c string? string?))

Like gracket-launcher-get-file-extension+style+filters, but for Racket
launchers.

                                        *mred-program-launcher-path*
(mred-program-launcher-path  name                         ~
                            [#:user? user?                ~
                             #:tethered? tethered?]) -> path? ~
  name : string? ~
  user? : any/c = #f ~
  tethered? : any/c = #f ~
(mred-launcher-is-directory?) -> boolean?
(mred-launcher-is-actually-directory?) -> boolean?
(mred-launcher-add-suffix path-string?) -> path?
  path-string? : path ~
(mred-launcher-put-file-extension+style+filters)
 -> (or/c string? false/c)
    (listof (one-of/c 'packages 'enter-packages))
    (listof (list/c string? string?))

Backward-compatible aliases for gracket-program-launcher-path, etc.

Changed in version 6.5.0.2 of package base: Added the #:tethered?
argument.

                                        *mzscheme-program-launcher-path*
(mzscheme-program-launcher-path  name                         ~
                                [#:user? user?                ~
                                 #:tethered? tethered?]) -> path? ~
  name : string? ~
  user? : any/c = #f ~
  tethered? : any/c = #f ~
(mzscheme-launcher-is-directory?) -> boolean?
(mzscheme-launcher-is-actually-directory?) -> boolean?
(mzscheme-launcher-add-suffix path-string?) -> path?
  path-string? : path ~
(mzscheme-launcher-put-file-extension+style+filters)
 -> (or/c string? false/c)
    (listof (one-of/c 'packages 'enter-packages))
    (listof (list/c string? string?))

Backward-compatible aliases for racket-program-launcher-path, etc.

Changed in version 6.5.0.2 of package base: Added the #:tethered?
argument.

                                        *installed-executable-path->desktop-path*
(installed-executable-path->desktop-path exec-path  ~
                                         user?)    
 -> (and/c path? complete-path?)
  exec-path : path-string? ~
  user? : any/c ~

Returns a path for a ".desktop" file to describe the installed
executable at exec-path. Only the filename part of exec-path is used.
The user? argument should be true if exec-path is installed in a
user-specific location (in which case the result path will also be
user-specific).

                                        *installed-desktop-path->icon-path*
(installed-desktop-path->icon-path desktop-path  ~
                                   user?        
                                   suffix)      
 -> (and/c path? complete-path?)
  desktop-path : path-string? ~
  user? : any/c ~
  suffix : bytes? ~

Returns a path for an icon file to be referenced by the "desktop" file
at desktop-path. Only the filename part of desktop-path is used. The
user? argument should be true if desktop-path is installed in a
user-specific location (in which case the result path will also be
user-specific).  The suffix argument provides the icon-file suffix,
normally either #"png" or #"ico".

3. Launcher Configuration

                                        *gracket-launcher-up-to-date?*
(gracket-launcher-up-to-date? dest aux) -> boolean? ~
  dest : path-string? ~
  aux : (listof (cons/c symbol? any/c)) ~

Returns #t if the GRacket launcher dest does not need to be updated,
assuming that dest is a launcher and its arguments have not changed.

                                        *racket-launcher-up-to-date?*
(racket-launcher-up-to-date? dest aux) -> boolean? ~
  dest : path-string? ~
  aux : (listof (cons/c symbol? any/c)) ~

Analogous to gracket-launcher-up-to-date?, but for a Racket launcher.

                                        *build-aux-from-path*
(build-aux-from-path path) -> (listof (cons/c symbol? any/c)) ~
  path : path-string? ~

Creates an association list suitable for use with make-gracket-launcher
or create-embedding-executable.  It builds associations by adding to
path suffixes, such as ".icns", checking whether such a file exists, and
calling extract-aux-from-path if so. The results from all recognized
suffixes are appended together.

                                        *extract-aux-from-path*
(extract-aux-from-path path) -> (listof (cons/c symbol? any/c)) ~
  path : path-string? ~

Creates an association list suitable for use with make-gracket-launcher
or create-embedding-executable.  It builds associations by recognizing
the suffix of path, where the recognized suffixes are as follows:

* ".icns" -> 'icns file for use on Mac OS

* ".ico" -> 'ico file for use on Windows or Unix

* ".png" -> 'png file for use on Unix

* ".lch" -> 'independent? as #t (the file content is ignored) for use on
  Windows

* ".creator" -> 'creator as the initial four characters in the file for
  use on Mac OS

* ".filetypes" -> 'file-types as read content (a single S-expression),
  and 'resource-files as a list constructed by finding
  "CFBundleTypeIconFile" entries in 'file-types (and filtering
  duplicates); for use on Mac OS

* ".utiexports" -> 'uti-exports as read content (a single S-expression);
  for use on Mac OS

* ".wmclass" -> 'wm-class as the literal content, removing a trailing
  newline if any; for use on Unix

* ".desktop" -> 'desktop as the literal content; for use on Unix

* ".startmenu" -> 'start-menu as the file content if it reads as a real
  number, #t otherwise, for use on Windows

* ".extreg" -> 'extension-register as read content (a single
  S-expression), but with relative (to the ".extreg" file) paths
  converted to absolute paths; for use on Windows

                                        *current-launcher-variant*
(current-launcher-variant) -> symbol? ~
(current-launcher-variant variant) -> void?
  variant : symbol? ~

A parameter that indicates a variant of Racket or GRacket to use for
launcher creation and for generating launcher names. The default is the
result of (system-type 'gc). On Unix and Windows, the possibilities are
'cgc, '3m, and 'cs. On Mac OS, the 'script-cgc, 'script-3m, and
'script-cs variants are also available for GRacket launchers.

                                        *available-gracket-variants*
(available-gracket-variants) -> (listof symbol?) ~

Returns a list of symbols corresponding to available variants of GRacket
in the current Racket installation. The list normally includes at least
one of '3m, 'cgc, or 'cs— whichever is the result of (system-type
'gc)—and may include the others, as well as 'script-3m, 'script-cgc,
and/or 'script-cs on Mac OS.

                                        *available-racket-variants*
(available-racket-variants) -> (listof symbol?) ~

Returns a list of symbols corresponding to available variants of Racket
in the current Racket installation. The list normally includes at least
one of '3m, 'cgc, or 'cs—whichever is the result of (system-type
'gc)—and may include the others.

                                        *mred-launcher-up-to-date?*
(mred-launcher-up-to-date? dest aux) -> boolean? ~
  dest : path-string? ~
  aux : (listof (cons/c symbol? any/c)) ~
(mzscheme-launcher-up-to-date? dest aux) -> boolean?
  dest : path-string? ~
  aux : (listof (cons/c symbol? any/c)) ~
(available-mred-variants) -> (listof symbol?)
(available-mzscheme-variants) -> (listof symbol?)

Backward-compatible aliases for gracket-launcher-up-to-date?, etc.

4. Launcher Creation Signature

 (require launcher/launcher-sig) package: compiler-lib ~

launcher^ : signature ~

Includes the identifiers provided by launcher/launcher.

5. Launcher Creation Unit

 (require launcher/launcher-unit) package: compiler-lib ~

launcher@ : unit? ~

A unit that imports nothing and exports launcher^.
