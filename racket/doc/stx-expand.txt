Expanding Top-Level Forms

                                        *expand*
(expand top-level-form) -> syntax? ~
  top-level-form : any/c ~ ~

Expands all non-primitive syntax in top-level-form, and returns a syntax
object for the expanded form that contains only core forms, matching the
grammar specified by [missing].

Before top-level-form is expanded, its lexical context is enriched with
namespace-syntax-introduce, just as for eval. Use syntax->datum to
convert the returned syntax object into a printable datum.

Here’s an example of using expand on a module:

  (parameterize ([current-namespace (make-base-namespace)])
   (expand
    (datum->syntax
     #f
     '(module foo scheme
        (define a 3)
        (+ a 4)))))

Here’s an example of using expand on a non-top-level form:

  (define-namespace-anchor anchor)
  (parameterize ([current-namespace
                  (namespace-anchor->namespace anchor)])
   (expand
    (datum->syntax
     #f
     '(delay (+ 1 2)))))

                                        *expand-syntax*
(expand-syntax stx) -> syntax? ~
  stx : syntax? ~ ~

Like (expand stx), except that the argument must be a syntax object, and
its lexical context is not enriched before expansion.

                                        *expand-once*
(expand-once top-level-form) -> syntax? ~
  top-level-form : any/c ~ ~

Partially expands top-level-form and returns a syntax object for the
partially-expanded expression. Due to limitations in the expansion
mechanism, some context information may be lost. In particular, calling
expand-once on the result may produce a result that is different from
expansion via expand.

Before top-level-form is expanded, its lexical context is enriched with
namespace-syntax-introduce, as for eval.

                                        *expand-syntax-once*
(expand-syntax-once stx) -> syntax? ~
  stx : syntax? ~ ~

Like (expand-once stx), except that the argument must be a syntax
object, and its lexical context is not enriched before expansion.

                                        *expand-to-top-form*
(expand-to-top-form top-level-form) -> syntax? ~
  top-level-form : any/c ~ ~

Partially expands top-level-form to reveal the outermost syntactic form.
This partial expansion is mainly useful for detecting top-level uses of
begin. Unlike the result of expand-once, expanding the result of
expand-to-top-form with expand produces the same result as using expand
on the original syntax.

Before stx-or-sexpr is expanded, its lexical context is enriched with
namespace-syntax-introduce, as for eval.

                                        *expand-syntax-to-top-form*
(expand-syntax-to-top-form stx) -> syntax? ~
  stx : syntax? ~ ~

Like (expand-to-top-form stx), except that the argument must be a syntax
object, and its lexical context is not enriched before expansion.

1. Information on Expanded Modules

Information for an expanded module declaration is stored in a set of
syntax properties (see [missing]) attached to the syntax object:

* 'module-variable-provides — a list of provided items, where each item
  is one of the following:

  * symbol — represents a locally defined variable that is provided with
    its defined name.

  * (cons provided-sym defined-sym) — represents a locally defined
    variable that is provided with renaming; the first symbol is the
    exported name, and the second symbol is the defined name.

  * (list* module-path-index provided-sym defined-sym) — represents a
    re-exported and possibly re-named variable from the specified
    module; module-path-index is either a module path index or symbol
    (see [missing]), indicating the source module for the binding. The
    provided-sym is the external name for the re-export, and defined-sym
    is the originally defined name in the module specified by
    module-path-index.

* 'module-syntax-provides — like 'module-variable-provides, but for
  syntax exports instead of variable exports.

* 'module-indirect-provides — a list of symbols for variables that are
  defined in the module but not exported; they may be exported
  indirectly through macro expansions.  Definitions of macro-generated
  identifiers create uninterned symbols in this list. The order of
  identifiers in the list corresponds to an order for access from
  bytecode.

* 'module-indirect-for-meta-provides — similar to
  'module-indirect-provides: an association list from a phase level to a
  list of symbols for variables that are defined in the module at phases
  higher than 0 and not exported.

  Added in version 6.5.0.5.

* 'module-body-context — a syntax object whose lexical information
  corresponds to the inside of the module, so it includes the
  expansion’s outside-edge scope and its inside-edge scope; that is, the
  syntax object simulates an identifier that is present in the original
  module body and inaccessible to manipulation by any macro, so that its
  lexical information includes bindings for the module’s imports and
  definitions.

  Added in version 6.4.0.1.

* 'module-body-inside-context — a syntax object whose lexical
  information corresponds to an identifier that starts with no lexical
  context and is moved into the macro, so that it includes only the
  expansions’s inside-edge scope.

  Added in version 6.4.0.1.

* 'module-body-context-simple? — a boolean, where #t indicates that the
  bindings of the module’s body (as recorded in the lexical information
  of the value of the 'module-body-inside-context property) can be
  directly reconstructed from modules directly imported into the module,
  including imported for-syntax, for-meta, and for-template.

  Added in version 6.4.0.1.
